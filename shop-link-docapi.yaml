openapi: 3.0.2
info:
  title: SynApps Core API Documentation
  description: |
    # Notes

    ## Namespace

    A namespace is an abstract association of entities that are defined in that specific namespace.

    The main use of namespace is its matching to basic entities from other services
    (e.g. `polyclinic_id` from SynApps Clinic)

    The string `ns` is actually the primary key of model `Namespace`,
    which its instances will be created implicitely (instructed by another service, if not already created) when needed,
    and has an optional (default null) title.

    Bounded entities (which need to have a non-null `namespace` foreign key relation to `Namespace` in database) are:
    * `Patient`
    * `OldFormStructure`
    * `Form` (a.k.a. `FormStructure`)

    Each user has access to some namespaces (hence access to bounded entities of those namespaces).

  version: "v1"
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
servers:
  - url: "https://domain.com/api/v1"
tags:
  - name: user
  - name: admission
  - name: patient
  - name: form
    description: (old)
  - name: syn_form
  - name: lab_test
  - name: drug
  - name: report
  - name: list
  - name: entity
  - name: drugstore
paths:

  "/user":
    get:
      tags:
        - user
      security:
        - AccessJWT: []
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      summary: get the list of all users in the namespace
      responses:
        "200":
          description: all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithNamespaceAccess"

        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

    post:
      tags:
        - user
      summary: create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreation"
      responses:
        "201":
          $ref: "#/components/responses/UserWithNamespaceAccessResponse"

  "/user/find/username/{username}":
    get:
      tags:
        - user
      security:
        - AccessJWT: []
      summary: find a user globally
      parameters:
        - name: username
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/User/properties/username"

      responses:
        "200":
          description: found user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSummaryWithUsername"

        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

        "404":
          description: user not found

  /user/oauth_login:
    get:
      deprecated: true
      tags:
        - user
      summary: login with ouath.
      description:
        Redirect the user to Serebrum server to initiate the authentication and authorization process.
        After authentication, the response is sent back to HIS using the specified redirect URL.
      operationId: login
      parameters:
        - name: access
          required: false
          in: query
          description: |
            provide access token (if available) for the application server to be able to skip OAuth flow if possible
            (i.e. having valid oauth_refresh from the OAuth server)
          schema:
            type: string
      responses:
        "302":
          description: Redirect user to authentication server login page.
          headers:
            Location:
              schema:
                type: string
                description: redirection url
                example: https://serebrum.com/oauth?client_id=1234&redirect_uri=his/auth&response_type=code"
        "400":
          description: bad request
        "403":
          description: forbidden

  # /user/offline_login:
  #   post:
  #     tags:
  #       - user
  #     summary: login into local account.
  #     description: "login into local account with provided username and password from authentication server. users must be authenticated from main server for the first time."
  #     operationId: login_offline
  #     requestBody:
  #       $ref: "#/components/requestBodies/loginBody"
  #     responses:
  #       "200":
  #         description: authorization token
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/TokenPairResponseForHIS"
  #       "400":
  #         description: bad request
  #       "403":
  #         description: forbidden

  /user/info:
    get:
      tags:
        - user
      security:
        - AccessJWT: []
      summary: get user information
      operationId: getUserInfo
      responses:
        "200":
          description: user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSelfInfo"

  "/user/{user_id}":
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      - $ref: "#/components/parameters/RequiredNamespaceParam"
    get:
      tags:
        - user
      security:
        - AccessJWT: []
      responses:
        "200":
          $ref: "#/components/responses/UserWithNamespaceAccessResponse"
    # delete:
    #   tags:
    #     - user
    #   responses:
    #     204:
    #       description: the user deleted successfully.

  "/user/{user_id}/access":
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
    patch:
      tags:
        - user
      security:
        - AccessJWT: []
      summary: change access of a user at a namespace
      description: "NOTE: The user will be added to the `namespace` if not already there."
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  required:
                    - namespace
                  properties:
                    namespace:
                      type: integer
                - $ref: "#/components/schemas/WriteNamespaceAccess"
      responses:
        "200":
          $ref: "#/components/responses/UserWithNamespaceAccessResponse"

  # TODO: remove user from namespace

  "/user/auth/token":
    get:
      tags:
        - user
      summary: obtain access and refresh token with provided authorization code.
      operationId: token_exchange
      parameters:
        - name: code
          required: true
          in: query
          schema:
            type: string
        # - name: redirect_uri
        #   required: true
        #   in: query
        #   schema:
        #     type: string

      responses:
        "200":
          description: authorization token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPairResponseForHIS"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/user/auth/login":
    post:
      tags:
        - user
      description: "provide credentials and get access and refresh tokens"
      operationId: auth_login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: generated access and refresh tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
        "400":
          description: bad request
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: invalid credentials
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  "/user/auth/refresh":
    post:
      tags:
        - user
      description: "provide refresh token and get new access token"
      operationId: auth_refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh
              properties:
                refresh:
                  type: string
      responses:
        "200":
          description: new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: expired/invalid refresh token
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  "/user/auth/logout":
    post:
      tags:
        - user
      description: "provide refresh token to revoke it"
      operationId: auth_logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh
              properties:
                refresh:
                  type: string
      responses:
        "200":
          description: logged out successfully
        "401":
          description: expired/invalid refresh token
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  /patient:
    post:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: create a patient profile
      description: |
        Create a profile for a patient who doesn't already
        have a profile in our system(i.e. she is being admitted for the first time.)

        NOTE: must of the fields are nullable only when the patient is incognito
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientCreation"
      responses:
        "200":
          description: created patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

    get:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: search between patients
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: national_id
          in: query
          required: false
          schema:
            type: string
        - name: namespace
          in: query
          required: false # TODO: required: true
          schema:
            $ref: "#/components/schemas/Namespace/properties/id"
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
      responses:
        "200":
          description: list of all patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Patient"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/patient/statistics":
    get:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: list of days - patients
      parameters:
        - name: start
          in: query
          description: starting time
          required: true
          schema:
            type: string
            format: date
        - name: end
          in: query
          description: endinging time
          required: true
          schema:
            type: string
            format: date
        - name: namespace
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Namespace/properties/id"

      responses:
        "200":
          description: list of all days with patients count
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    day:
                      format: YYYY-mm-dd
                      example: "2020-04-17"
                      description: can be datetime or date
                    patient_count:
                      type: integer

        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  /patient/hint:
    get:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: searching patients using name and national_id
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: national_id
          in: query
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/RequiredNamespaceParam"
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
      responses:
        "200":
          description: list of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Patient"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/patient/export":
    get:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: export filtered patients as xlsx file
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: national_id
          in: query
          required: false
          schema:
            type: string
        - name: namespace
          in: query
          required: false # TODO: required: true
          schema:
            $ref: "#/components/schemas/Namespace/properties/id"
      responses:
        "200":
          description: xlsx file
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  # /admission/{admission_id}/patient:
  #   get:
  #     tags:
  #       - admission
  #     security:
  #       - AccessJWT: []
  #     description: get patient profile

  #     parameters:
  #       - name: admission_id
  #         required: true
  #         in: path
  #         schema:
  #           type: string

  #     responses:
  #       "200":
  #         description: patient's profile
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Patient"

  #       "401":
  #         description: unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  #       "403":
  #         description: not allowed to perform this action
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  #       "404":
  #         description: admission not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
  #   put:
  #     tags:
  #       - admission
  #     security:
  #       - AccessJWT: []

  #     description: edit patient profile
  #     parameters:
  #       - name: admission_id
  #         required: true
  #         in: path
  #         schema:
  #           type: string
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/PatientCreation"
  #     responses:
  #       "200":
  #         description: patient updated successfully
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Patient"
  #       "400":
  #         description: invalid properties
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

  #       "401":
  #         description: unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  #       "403":
  #         description: not allowed to perform this action
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  #       "404":
  #         description: admission not found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"

  /admission:
    post:
      tags:
        - admission
      security:
        - AccessJWT: []
      summary: create an admission
      requestBody:
        $ref: "#/components/requestBodies/createAdmissionBody"

      responses:
        "200":
          description: admission created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admission"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  /admission/{admission_id}:
    put:
      tags:
        - admission
      security:
        - AccessJWT: []
      summary: edit admission
      parameters:
        - name: admission_id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/createAdmissionBody"

      responses:
        "200":
          description: admission updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admission"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
    delete:
      tags:
        - admission
      security:
        - AccessJWT: []
      summary: delete admission
      parameters:
        - name: admission_id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: admission deleted successfully

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"

    get:
      tags:
        - admission
      security:
        - AccessJWT: []
      summary: get admission by id
      parameters:
        - name: admission_id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: admission obj response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admission"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"

  /patient/{patient_id}:
    parameters:
      - name: patient_id
        required: true
        in: path
        schema:
          type: string
    get:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: get a patient's profile
      responses:
        "200":
          description: patient's profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: patient not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_PATIENT_NOT_FOUND"
    put:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: update patient's profile
      description: |
        NOTE: must of the fields are nullable only when the patient is incognito
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientEdition"
      responses:
        "200":
          description: patient profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: patient not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_PATIENT_NOT_FOUND"

    delete:
      tags:
        - patient
      security:
        - AccessJWT: []

      summary: delete profile of patient
      responses:
        "200":
          description: patient deleted successfully

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: forbidden(e.g. there are admissions related to this patient)
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

        "404":
          description: patient not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_PATIENT_NOT_FOUND"

  /patient/{patient_id}/summon/clinic/{clinic_id}:
    parameters:
      - name: patient_id
        required: true
        in: path
        schema:
          type: integer
      - name: clinic_id
        required: true
        in: path
        schema:
          type: integer
    post:
      tags:
        - patient
      security:
        - AccessJWT: []
      summary: summon the patient to the clinic
      responses:
        "200":
          description: patient profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/form/structure":
    get:
      tags:
        - form
      security:
        - AccessJWT: []
      summary: get list of form structures
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      responses:
        "200":
          description: list of form structures
          content:
            application/json:
              schema:
                type: object
                properties:
                  form_structures:
                    type: array
                    items:
                      $ref: "#/components/schemas/OldFormStructure"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/form/structure/{form_type}":
    parameters:
      - name: form_type
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - form
      security:
        - AccessJWT: []
      summary: get form structure
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      responses:
        "200":
          description: form structure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OldFormStructure"
        "404":
          description: unknown `form_type`
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORM_TYPE_NOT_FOUND"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/form/instance/{form_type}":
    parameters:
      - name: form_type
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - form
      security:
        - AccessJWT: []
      summary: submit new form and create a form instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OldFormCreation"
      responses:
        "200":
          description: submitted form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OldForm"
        "400":
          description: errors in form fields, or unknown `form_type`
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
    get:
      tags:
        - form
      security:
        - AccessJWT: []
      summary: get form instances of the patient
      description: get `form_type` form instances of the specified patient
      parameters:
        - name: patient_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: form instances for the patient, sorted from newest to oldest
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      $ref: "#/components/schemas/OldFormSummary"
        "404":
          description: unknown `form_type`
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORM_TYPE_NOT_FOUND"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/form/instance/{form_id}":
    parameters:
      - name: form_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - form
      security:
        - AccessJWT: []
      summary: get form instance
      responses:
        "200":
          description: form instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OldForm"
        "404":
          description: form not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORM_NOT_FOUND"
        "403":
          description: forbidden, or `form_id` not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
    put:
      tags:
        - form
      security:
        - AccessJWT: []
      summary: edit form instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OldFormEdition"
      responses:
        "200":
          description: edited form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OldForm"
        "400":
          description: errors in form fields
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
    delete:
      tags:
        - form
      security:
        - AccessJWT: []
      summary: delete form instance
      description: will be hidden at DB
      responses:
        "200":
          description: delete form instance successfully
        "404":
          description: form not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORM_NOT_FOUND"
        "403":
          description: forbidden, or `form_id` not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/form/subject_key":
    get:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: get form subject keys
      responses:
        200:
          description: subject keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  subject_keys:
                    type: array
                    items:
                      type: string
                      example: patient

  "/form/f":
    post:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: create a form in the specified namespace # inside request body
      description: |
        `fields` cannot be provided at creation of the form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WriteForm"
      responses:
        200:
          description: created form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadForm"
    get:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: get forms
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
        - $ref: "#/components/parameters/FormSubjectKeyParam"
        - $ref: "#/components/parameters/FormRelatedClinicParam"
        - $ref: "#/components/parameters/TitleSearchParam"
      # TODO: domain (clinic) filter
      responses:
        200:
          description: summary of available forms
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReadFormSummary"
    patch:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: reorder the forms
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                forms:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        # field name in Form is readOnly so I can't reuse it here.
                        type: string
                        description: |
                          the identifier of the form

                          `name` structure: "{namespace}${handle}" (e.g. "1$medical_history")
                        pattern: "[\\w$]+"
                      order:
                        $ref: "#/components/schemas/Form/properties/order"
      responses:
        200:
          description: summary of available forms
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReadFormSummary"

  "/form/f/search":
    post:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: Advanced search for patients and form entries.
      description: |
        With providing specific data you can search among thousonds of records within few miliseconds.
        For patient fields set `structure=null`.
        For range lookup you should provide two valuses, first one is for `gte` and the second is for `lte`.
        For match lookup you should provide a string value to be matched.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SynSearchRequest"
      responses:
        200:
          description: List of matched objects.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SynSearchResponse"
        400:
          description: Bad request if you don't provide correct request body.
        401:
          description: Only authorized users have access to search.

  "/form/f/statistics":
    get:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: list of days - forms
      parameters:
        - name: start
          in: query
          description: starting time
          required: true
          schema:
            type: string
            format: date
        - name: end
          in: query
          description: endinging time
          required: true
          schema:
            type: string
            format: date
        - name: namespace
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Namespace/properties/id"
        - name: form_name
          in: query
          required: false
          schema:
            type: string

      responses:
        "200":
          description: list of all days with forms count
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    day:
                      format: YYYY-mm-dd
                      example: "2020-04-17"
                      description: can be datetime or date
                    form_count:
                      type: integer

        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/form/f/entry":
    parameters:
      - name: subject_key
        in: query
        required: True
        schema:
          type: string
      - name: subject_id
        in: query
        required: True
        schema:
          type: string
      - $ref: "#/components/parameters/PaginationOffsetParam"
      - $ref: "#/components/parameters/PaginationLimitParam"
    get:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: get all form entries for a subject_key & subject_id
      responses:
        200:
          description: "ordered by `created` descending"
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/AllFormEntry"
        404:
          description: form not found
          # TODO: content

  "/form/f/{form_name}":
    parameters:
      - $ref: "#/components/parameters/FormNameParam"
    get:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: get form
      responses:
        200:
          description: structure of the form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadForm"
        404:
          description: form not found
          # TODO: content
    put:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: edit a form
      description: |
        `namespace` or `subject_id` cannot be provided at edition of the form
      parameters:
        - $ref: "#/components/parameters/FormValidateParam"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/WriteForm"
                - type: object
                  properties:
                    delete_fields:
                      description: "an array of the fields name for deleting"
                      type: array
                      items:
                        type: string
      responses:
        200:
          description: edited form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadForm"

    patch:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: edit a basic properties of form
      description: |
        This endpoint is for partial updating to edit the basic properties of form.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WriteFormSummary"
      responses:
        200:
          description: edited basic properties of form
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadFormSummary"

    delete:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: delete form
      responses:
        200:
          description: form structure deleted with all fields and entries
        404:
          description: form not found

  "/form/f/{form_name}/entry":
    parameters:
      # namespace known by the form
      - $ref: "#/components/parameters/FormNameParam"
    get:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: filter form entries
      description: |
        ordered by `created` descending

        `subject_id` must be always included in filters
      parameters:
        - $ref: "#/components/parameters/IndexedFieldsFilterParam"
        - $ref: "#/components/parameters/PaginationOffsetParam"
        - $ref: "#/components/parameters/PaginationLimitParam"
      responses:
        200:
          $ref: "#/components/responses/FormEntriesResponse"
        400:
          $ref: "#/components/responses/BadFormEntryQueryResponse"
        404:
          $ref: "#/components/responses/FormNameNotFoundResponse"
    post:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: submit a new form entry
      parameters:
        - $ref: "#/components/parameters/FormValidateParam"
      requestBody:
        $ref: "#/components/requestBodies/SubmitFormEntry"
      responses:
        200:
          $ref: "#/components/responses/SubmittedFormEntryResponse"
        400:
          $ref: "#/components/responses/BadFormEntryResponse"
        404:
          $ref: "#/components/responses/FormNameNotFoundResponse"

  "/form/f/{form_name}/entry/{form_entry_id}":
    parameters:
      - $ref: "#/components/parameters/FormNameParam"
      - $ref: "#/components/parameters/FormEntryIdParam"
    put:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: edit a form entry
      parameters:
        - $ref: "#/components/parameters/FormValidateParam"
      requestBody:
        $ref: "#/components/requestBodies/EditFormEntry"
      responses:
        200:
          $ref: "#/components/responses/EditedFormEntryResponse"
        400:
          $ref: "#/components/responses/BadFormEntryResponse"
        404:
          $ref: "#/components/responses/FormEntryNotFoundResponse"
    delete:
      tags:
        - syn_form
      summary: delete a form entry
      responses:
        200:
          description: successfully deleted form entry
        404:
          $ref: "#/components/responses/FormEntryNotFoundResponse"

  "/form/f/{form_name}/structure_file":
    parameters:
      # namespace known by the form
      - $ref: "#/components/parameters/FormNameParam"
    post:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: submit a new file for form structure
      description: |
        Each file that is used in the form structure, should upload by this endpoint
        and put the file's URL that can get it from the endpoint response, anywhere you want.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          $ref: "#/components/responses/SubmittedSynFormFileStageResponse"
        400:
          $ref: "#/components/responses/BadFormEntryResponse"
        404:
          $ref: "#/components/responses/FormNameNotFoundResponse"

  "/form/f/{form_name}/entry_file":
    parameters:
      # namespace known by the form
      - $ref: "#/components/parameters/FormNameParam"
    post:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: submit a new file for a entry
      description: |
        Before submitting the form entry with file, should upload the file by this endpoint
        and get the stage file's id from its response. Put the id in the form entry's data to submit.

        `Note:`In the form entry update, if you don't need to update the file, shouldn't change file field's value.
        If you need, should upload the file and put its id.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                field_name:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        200:
          $ref: "#/components/responses/SubmittedSynFormEntryFileStageResponse"
        400:
          $ref: "#/components/responses/BadFormEntryResponse"
        404:
          $ref: "#/components/responses/FormNameNotFoundResponse"

  "/form/f/{form_name}/export/xlsx":
    parameters:
      - $ref: "#/components/parameters/FormNameParam"
    post:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      # deprecated: true  # just meaning incomplete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FormExportRequestBody"
      summary: "[WIP] trigger a task to create an export file of all form entries"
      responses:
        202:
          description: "Task to export file triggered successfully."
          content:
            application/json:              
              schema:
                $ref: "#/components/schemas/FormExportResponseBody"
        404:
          description: form not found
    delete:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      summary: "[WIP] delete the export file of the form"
      responses:
        200:
          description: "Export file has been deleted successfully."
        404:
          description: form not found

  "/form/f/report/{form_export_id}":
    parameters:
      - name: form_export_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - syn_form
      security:
        - AccessJWT: []
      deprecated: true
      summary: "get the report file"

      responses:
        102:
          description: "the report file isn't still ready to download"
        200:
          description: "report file in xlsx format"
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary

  "/lab_test/factor":
    get:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: search factors
      parameters:
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
        - name: search
          description: will be searched in the name of factors
          in: query
          schema:
            type: string
      responses:
        "200":
          description: list of factors
          content:
            application/json:
              schema:
                type: object
                properties:
                  factors:
                    type: array
                    items:
                      $ref: "#/components/schemas/SearchedLabTestGroup"

  "/lab_test/recent":
    parameters:
      - name: patient_id
        required: true
        in: query
        schema:
          type: string
    get:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: get recent patient's lab tests
      description: ""
      operationId: getRecentPatientLabTests
      parameters:
        - name: offset
          in: query
          description: for pagination on lab_test_groups (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination on lab_test_groups (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
      responses:
        "200":
          description: recent patient's lab tests
          content:
            application/json:
              schema:
                type: object
                properties:
                  lab_test_groups:
                    type: array
                    items:
                      $ref: "#/components/schemas/LabTestGroup"
                  lab_test_images_group:
                    type: array
                    items:
                      $ref: "#/components/schemas/LabTestImagesGroup"
        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/lab_test/result":
    post:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: submit new LabTestResult
      operationId: submitLabTestResult
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabTestResultCreation"
      responses:
        "200":
          description: submitted LabTestResult
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabTestResult"
        "400":
          description: invalid properties (e.g. duplicate factor_id provided)
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/lab_test/result/{result_id}":
    parameters:
      - name: result_id
        required: true
        in: path
        schema:
          type: string
    put:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: edit LabTestResult
      operationId: editLabTestResult
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabTestResultEdition"
      responses:
        "200":
          description: edited LabTestResult
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabTestResult"
        "400":
          description: invalid properties (e.g. duplicate factor_id provided)
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

    delete:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: delete LabTestResult
      description: will be hidden at DB
      operationId: deleteLabTestResult
      responses:
        "200":
          description: LabTestResult deleted successfully

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/lab_test/images_result":
    post:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: submit new LabTestImagesResult by providing its first image
      operationId: submitLabTestImagesResult
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - data
                - image
              properties:
                data:
                  type: object
                  required:
                    - issued_datetime
                  description: |
                    `report_datetime` is optional

                    ```
                    {
                      "issued_datetime": "2020-09-22T19:31:14+03:30",
                      "report_datetime": "2020-09-23T19:31:14+03:30"
                    }
                    ```
                  properties:
                    issued_datetime:
                      $ref: "#/components/schemas/LabTestResultCore/properties/issued_datetime"
                    report_datetime:
                      $ref: "#/components/schemas/LabTestResultCore/properties/report_datetime"
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: successfully created LabTestImagesResult
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabTestImagesResult"
        "400":
          description: invalid data or bad image
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/lab_test/images_result/{images_result_id}":
    parameters:
      - name: images_result_id
        required: true
        in: path
        schema:
          type: integer
    delete:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: delete LabTestImagesResult
      operationId: deleteLabTestImagesResult
      description: will be hidden at DB
      responses:
        "200":
          description: LabTestImagesResult deleted successfully

        "400":
          description: bad image
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/lab_test/images_result/{images_result_id}/image":
    parameters:
      - name: images_result_id
        required: true
        in: path
        schema:
          type: integer
    post:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: add image to LabTestImagesResult
      operationId: addImageToLabTestImagesResult
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: successfully added image to LabTestImagesResult
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabTestImagesResult"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/lab_test/images_result/{images_result_id}/image/{image_id}":
    parameters:
      - name: images_result_id
        required: true
        in: path
        schema:
          type: integer
      - name: image_id
        required: true
        in: path
        schema:
          type: integer
    delete:
      tags:
        - lab_test
      security:
        - AccessJWT: []
      summary: delete image from LabTestImagesResult
      operationId: deleteLabTestImage
      description: will be actully deleted along with the file
      responses:
        "200":
          description: image deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabTestImagesResult"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: forbidden, or images_result_id and image_id are not related
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/drug":
    get:
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: search drugs
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
      responses:
        "200":
          description: searched drugs
          content:
            application/json:
              schema:
                type: object
                properties:
                  drugs:
                    type: array
                    items:
                      $ref: "#/components/schemas/DrugWithFeasibilities"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  "/drug/form":
    get:
      deprecated: true
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: search drug forms
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: drug_id
          in: query
          description: filter results based on the selected drug
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
      responses:
        "200":
          description: searched drug forms
          content:
            application/json:
              schema:
                type: object
                properties:
                  drug_forms:
                    type: array
                    items:
                      $ref: "#/components/schemas/DrugForm"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  "/drug/strength":
    get:
      deprecated: true
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: search drug strengths
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: drug_id
          in: query
          description: filter results based on the selected drug
          required: false
          schema:
            type: integer
        - name: drug_form_id
          in: query
          description: filter results based on the selected drug form
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
      responses:
        "200":
          description: searched drug strengths
          content:
            application/json:
              schema:
                type: object
                properties:
                  drug_strengths:
                    type: array
                    items:
                      $ref: "#/components/schemas/DrugStrength"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  "/drug/list":
    get:
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: get specific drugs
      parameters:
        - name: drug_ids
          in: query
          required: true
          description: comma-separated IDs
          style: form
          explode: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Drug/properties/id"
      responses:
        "200":
          description: drugs (not necessarily in the same order of `drug_ids`)
          content:
            application/json:
              schema:
                type: object
                properties:
                  drugs:
                    type: array
                    items:
                      $ref: "#/components/schemas/DrugWithFeasibilities"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "413":
          description: exceeded gateway URL length limit (too many drug_ids, about more than 200)

  "/drug/prescription":
    post:
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: submit a prescription for a patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrescriptionCreation"
      responses:
        "200":
          description: submitted prescription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prescription"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: no access to the patient # will report forbidden even if the patient_id does not exist
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
    get:
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: get all prescriptions for a patient
      description: ordered by `prescribed` descending
      parameters:
        - name: patient_id
          required: true
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: patient prescriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  prescriptions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Prescription"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: no access to the patient # will report forbidden even if the patient_id does not exist
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/drug/prescription/{prescription_id}":
    parameters:
      - name: prescription_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: edit a prescription
      # instructions:
      # - verify request body
      # - oldPrescribedDrugs = prescription.drugs.all()
      # - add new prescribed drugs to the prescription
      # - oldPrescribedDrugs.delete()
      # - return prescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Prescription"
      responses:
        "200":
          description: edited prescription
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Prescription"
        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: no access to the patient # will report forbidden even if the patient_id does not exist
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
    delete:
      tags:
        - drug
      security:
        - AccessJWT: []
      summary: delete a prescription
      description: will be hidden at DB # and not accessible through API at all
      responses:
        "200":
          description: deleted prescription
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: no access to the patient # will report forbidden even if the patient_id does not exist
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/report":
    post:
      tags:
        - report
      security:
        - AccessJWT: []
      description: |
        create report for patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportCreation"

      responses:
        "200":
          description: patient profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"

        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: patient not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_PATIENT_NOT_FOUND"

    get:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: get all reports of patient
      description: |
        get a list of all reports of the patient. if the type parameter is specified, all reports with that type returns in the response. otherwise, all type of reports will return(sorted by date).
      parameters:
        - name: patient_id
          required: true
          in: query
          schema:
            type: string
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
        - name: report_type_id
          required: false
          in: query
          schema:
            type: string

      responses:
        "200":
          description: array of reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: report not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_REPORT_NOT_FOUND"

  "/report/{report_id}":
    get:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: get report
      parameters:
        - name: report_id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: report not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_REPORT_NOT_FOUND"
    delete:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: delete report
      parameters:
        - name: report_id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: report deleted successfully

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

        "404":
          description: report not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_REPORT_NOT_FOUND"
    put:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: edit report
      parameters:
        - name: report_id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportEdition"
      responses:
        "200":
          description: report updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"

        "400":
          description: invalid properties
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: report not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_REPORT_NOT_FOUND"

  "/report/{report_id}/image":
    parameters:
      - name: report_id
        required: true
        in: path
        schema:
          type: integer
    post:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: add image to Report
      operationId: addImageToReport
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: successfully added image to Report
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: forbidden
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/report/{report_id}/image/{image_id}":
    parameters:
      - name: report_id
        required: true
        in: path
        schema:
          type: integer
      - name: image_id
        required: true
        in: path
        schema:
          type: integer
    delete:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: delete image from Report
      operationId: deleteReportImage
      description: will be actully deleted along with the file
      responses:
        "200":
          description: image deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: forbidden, or report_id and image_id are not related
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/report/type":
    get:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: get all report types
      responses:
        "200":
          description: list of types
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_types:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReportType"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/report/location":
    get:
      tags:
        - report
      security:
        - AccessJWT: []
      summary: search report locations
      parameters:
        - name: offset
          in: query
          description: for pagination (0-based)
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          description: "for pagination (min: 10, max: 100)"
          required: true
          schema:
            type: integer
            minimum: 10
            maximum: 100
        - name: report_type_id
          in: query
          schema:
            type: string
        - name: search
          description: will be searched in the name of report locations
          in: query
          schema:
            type: string
      responses:
        "200":
          description: list of locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_locations:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReportLocation"

        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"

  "/list/{list_name}":
    get:
      tags:
        - list
      description: get list of specific items
      parameters:
        - name: list_name
          in: path
          required: true
          schema:
            type: string
            enum:
              - nationality
              - city
              - arrival_mode
              - insurance_type
              - admission_type
      responses:
        "200":
          description: list of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string

        "404":
          description: list not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_LIST_NOT_FOUND"

  "/entity/choice":
    get:
      tags:
        - entity
      description: get list of available entities that can be exported
      responses:
        "200":
          description: list of entities
          content:
            application/json:
              schema:
                type: object
                properties:
                  entities:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          example: patient
                        title:
                          type: string
                          example: بیماران
                        en_title:
                          type: string
                          example: Patients
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

  "/entity/export/{entity}":
    get:
      tags:
        - entity
      description: export entity
      parameters:
        - name: entity
          in: path
          required: true
          schema:
            type: string
            example: patient
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      responses:
        "200":
          description: xlsx file
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"
        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: unknown entity
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ENTITY_NOT_FOUND"

  "/drugstore":
    get:
      summary: get all users drugstores
      tags:
        - drugstore
      responses:
        200:
          description: get all drugstores that user has access to them
          content:
            application/json:
              schema:
                type: object
                properties:
                  drugstores:
                    type: array
                    items:
                      $ref: "#/components/schemas/Drugstore"

  "/drugstore/config":
    parameters:
      - $ref: "#/components/parameters/RequiredNamespaceParam"
    patch:
      tags:
        - drugstore
      summary: update the drugstore config
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drugstore"
      responses:
        200:
          description: Drugstore Config has updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drugstore"
        400:
          $ref: "#/components/responses/BadFormResponse"

    get:
      tags:
        - drugstore
      summary: get the drugstore config
      responses:
        200:
          description: "get the drugstore config"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drugstore"
        400:
          $ref: "#/components/responses/BadFormResponse"

  "/drugstore/insurance":
    post:
      tags:
        - drugstore
      summary: create an insurance organization for the drugstore
      requestBody:
        $ref: "#/components/requestBodies/CreateInsurance"
      responses:
        201:
          description: created an insurance org.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Insurance"
        400:
          $ref: "#/components/responses/BadFormResponse"

    get:
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      tags:
        - drugstore
      summary: get all insurance organization for the drugstore
      responses:
        200:
          $ref: "#/components/responses/InsuranceListResponse"
        400:
          $ref: "#/components/responses/BadFormResponse"

  "/drugstore/insurance/{insurance_id}":
    parameters:
      - name: insurance_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      summary: get an insurance org. by id.
      responses:
        200:
          $ref: "#/components/responses/InsuranceResponse"

    put:
      tags:
        - drugstore
      summary: update insurance
      requestBody:
        description: "namespace can't change."
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          $ref: "#/components/responses/InsuranceResponse"

    delete:
      tags:
        - drugstore
      summary: delete insurance
      responses:
        204:
          description: Insurance has deleted successfully.

  "/drugstore/insurance/plan":
    post:
      tags:
        - drugstore
      summary: create an insurance plan for the drugstore
      requestBody:
        $ref: "#/components/requestBodies/CreateInsurancePlan"
      responses:
        201:
          description: created an insurance plan.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/InsurancePlan"
                type: object
                properties:
                  insurance:
                    $ref: "#/components/schemas/Insurance"
        400:
          $ref: "#/components/responses/BadFormResponse"

    get:
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      tags:
        - drugstore
      summary: get all insurance plans for the drugstore
      responses:
        200:
          description: all insurance plans.
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      $ref: "#/components/schemas/InsurancePlan"
        400:
          $ref: "#/components/responses/BadFormResponse"

  "/drugstore/insurance/plan/{plan_id}":
    parameters:
      - name: plan_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      responses:
        200:
          description: an Insurance plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InsurancePlan"
    put:
      tags:
        - drugstore
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsurancePlan"
      responses:
        200:
          description: Insurance plan updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/InsurancePlan"
                type: object
                properties:
                  insurance:
                    $ref: "#/components/schemas/Insurance"
    delete:
      tags:
        - drugstore
      responses:
        204:
          description: "Insurance plan deleted seccussfully"
        404:
          description: "`Not Found`"

  "/drugstore/insurance/commitment":
    post:
      tags:
        - drugstore
      summary: create a commitment
      requestBody:
        $ref: "#/components/requestBodies/CreateCommitment"
      responses:
        201:
          description: new commitment added to insurance fund.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Commitment"

    get:
      tags:
        - drugstore
      summary: get a list of commitments
      parameters:
        - $ref: "#/components/parameters/PlanParam"
        - $ref: "#/components/parameters/PaginationOffsetParam"
        - $ref: "#/components/parameters/PaginationLimitParam"
        - $ref: "#/components/parameters/DrugBrandParam"
        - $ref: "#/components/parameters/DrugFormParam"
      responses:
        200:
          $ref: "#/components/responses/CommitmentListRespnose"

  "/drugstore/insurance/commitment/{commitment_id}":
    parameters:
      - name: commitment_id
        in: path
        required: true
        schema:
          type: integer
    put:
      tags:
        - drugstore
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Commitment"
              type: object
              properties:
                speciality:
                  type: array
                  items:
                    type: integer
      responses:
        200:
          description: insurance commitment updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Commitment"

    delete:
      tags:
        - drugstore
      responses:
        204:
          description: The insurance commitment deleted.

  "/drugstore/speciality":
    get:
      tags:
        - drugstore
      summary: get a list of specialities
      description: |
        This endpoint will give a list of specialities.
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      responses:
        200:
          $ref: "#/components/responses/SpecialityListResponse"

  "/drugstore/speciality/{speciality_id}":
    parameters:
      - name: speciality_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      summary: get a speciality
      description: |
        This endpoint will give a speciality.
      responses:
        200:
          description: get a speciality
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Speciality"

  "/drugstore/doctor":
    post:
      tags:
        - drugstore
      summary: create doctor
      requestBody:
        $ref: "#/components/requestBodies/CreateDoctor"
      responses:
        201:
          $ref: "#/components/responses/DoctorResponse"

    get:
      tags:
        - drugstore
      summary: get a list of doctors
      description: |
        This endpoint will give a list of doctors. At least one of the `last_name` or `mc_number` should be provided.
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
        - name: mc_number
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Doctor/properties/mc_number"
        - name: last_name
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Doctor/properties/last_name"
      responses:
        200:
          $ref: "#/components/responses/DoctorListResponse"

  "/drugstore/doctor/{doctor_id}":
    parameters:
      - name: doctor_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      summary: get a specific doctor
      responses:
        200:
          description: get an specific doctor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"

    put:
      tags:
        - drugstore
      summary: update an specific doctor
      requestBody:
        $ref: "#/components/requestBodies/UpdateDoctorRequest"
      responses:
        200:
          description: asdf
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"

    delete:
      tags:
        - drugstore
      summary: delete an specific doctor
      responses:
        204:
          description: Doctor deleted successfully

  "/drugstore/invoice":
    post:
      tags:
        - drugstore
      summary: create an invoice
      requestBody:
        $ref: "#/components/requestBodies/CreateInvoice"
      responses:
        201:
          $ref: "#/components/responses/InvoicesResponse"

  "/drugstore/invoice/summary":
    get:
      tags:
        - drugstore
      summary: get invoices by search parameters
      description: |
        Generally, ranged search parameters are used together. Insurance_id parameter is a list of the insurance funds id.
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
        - $ref: "#/components/parameters/PaginationOffsetParam"
        - $ref: "#/components/parameters/PaginationLimitParam"
        - $ref: "#/components/parameters/PatientNameParam"
        - $ref: "#/components/parameters/CodeParam"
        - $ref: "#/components/parameters/PlanListParam"
        - $ref: "#/components/parameters/CreatedFromParam"
        - $ref: "#/components/parameters/CreatedToParam"
        - $ref: "#/components/parameters/PriceMinParam"
        - $ref: "#/components/parameters/PriceMaxParam"
        - name: include_no_plan
          in: query
          description: This parameter filter the invoices with no insurance plan.
          schema:
            type: boolean
        - name: storage
          in: query
          description: This parameter contains the ivnoice types that are concatinated with `,`
          schema:
            type: string
            example: 1,2
        - name: type
          in: query
          description: This parameter contains the ivnoice types that are concatinated with `,`
          schema:
            type: string
            example: T,R
        - name: sort_by
          in: query
          description: The negative sign in front of "-created" indicates descending order. Ascending order is implied.
          schema:
            type: string
            enum:
              [
                "-created",
                "created",
                "-invoice_total_cost",
                "invoice_total_cost",
              ]
      responses:
        200:
          $ref: "#/components/responses/InvoicesListResponse"

  "/drugstore/invoice/calculator":
    post:
      tags:
        - drugstore
      summary: Calculate the invoice cost
      requestBody:
        $ref: "#/components/requestBodies/CreateInvoice"
      responses:
        200:
          $ref: "#/components/responses/InvoicesResponse"

  "/drugstore/invoice/{invoice_id}":
    parameters:
      - name: invoice_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      summary: get an invoice
      responses:
        200:
          $ref: "#/components/responses/InvoicesResponse"
    put:
      tags:
        - drugstore
      summary: change the invoice
      requestBody:
        $ref: "#/components/requestBodies/ChangeInvoice"
      responses:
        200:
          description: invoice updated successfully.
          $ref: "#/components/responses/InvoicesResponse"

    delete:
      tags:
        - drugstore
      summary: delete an invoices by id
      responses:
        204:
          description: Invoice deleted successfully

  "/drugstore/invoice/transfer":
    post:
      tags:
        - drugstore
      summary: create a transfer invoice
      requestBody:
        $ref: "#/components/requestBodies/CreateTransferInvoice"
      responses:
        201:
          $ref: "#/components/responses/TransferInvoicesResponse"

  "/drugstore/invoice/secondparty":
    post:
      tags:
        - drugstore
      summary: create a Second Party
      requestBody:
        $ref: "#/components/requestBodies/CreateSecondParty"
      responses:
        201:
          $ref: "#/components/responses/SecondPartyResponse"

    get:
      tags:
        - drugstore
      summary: get a second party
      description: |
        This endpoint will give just one second party. That second party is the result of the query parameters.
        The query parameter should be matched completely.
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
        - name: insurance_code
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/SecondParty/properties/insurance_code"
        - name: nationality_code
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/SecondParty/properties/nationality_code"
        - name: company_code
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/SecondParty/properties/company_code"
      responses:
        200:
          $ref: "#/components/responses/SecondPartyResponse"

  "/drugstore/invoice/secondparty/{second_party_id}":
    parameters:
      - name: second_party_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      responses:
        200:
          $ref: "#/components/responses/SecondPartyResponse"

    put:
      tags:
        - drugstore
      requestBody:
        $ref: "#/components/requestBodies/UpdateSecondParty"
      responses:
        200:
          $ref: "#/components/responses/SecondPartyResponse"

    delete:
      tags:
        - drugstore
      responses:
        204:
          description: Second party has deleted.

  "/drugstore/invoice/transaction":
    post:
      tags:
        - drugstore
      summary: create new transaction
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Transaction"
              type: object
              properties:
                invoice:
                  type: integer
                  readOnly: false
      responses:
        201:
          description: New transaction is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
    get:
      tags:
        - drugstore
      parameters:
        - name: invoice
          required: false
          in: query
          schema:
            type: integer
        - name: transaction_type
          required: false
          in: query
          schema:
            type: string
      responses:
        200:
          description: list of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"

  "/drugstore/invoice/transaction/{transaction_id}":
    parameters:
      - name: transaction_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      responses:
        200:
          description: a transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"

    put:
      tags:
        - drugstore
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        200:
          description: a transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"

    delete:
      tags:
        - drugstore
      responses:
        204:
          description: Transaction has deleted.

  "/drugstore/product":
    post:
      tags:
        - drugstore
      summary: create new product
      requestBody:
        $ref: "#/components/requestBodies/CreateProduct"
      responses:
        201:
          description: give a single product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseSchema"

    get:
      tags:
        - drugstore
      summary: get a list of product
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
        - $ref: "#/components/parameters/PaginationOffsetParam"
        - $ref: "#/components/parameters/PaginationLimitParam"
        - $ref: "#/components/parameters/NameParam"
        - $ref: "#/components/parameters/ProductCategoryParam"
        - $ref: "#/components/parameters/ProductTypeParam"
        - $ref: "#/components/parameters/ShortcutParam"
        - $ref: "#/components/parameters/DrugFormParam"
        - $ref: "#/components/parameters/DrugBrandParam"
        - name: strength
          in: query
          required: false
          schema:
            type: string
        - name: erx
          in: query
          required: false
          schema:
            type: string
        # - name: source
        #   in: query
        #   required: false
        #   schema:
        #     type: string
        # - name: sid
        #   in: query
        #   required: false
        #   schema:
        #     type: string
      responses:
        200:
          $ref: "#/components/responses/ProductListResponse"

  "/drugstore/product/{product_id}":
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      summary: get a product by id
      responses:
        200:
          description: give a single product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseSchema"

    put:
      tags:
        - drugstore
      summary: update a product
      requestBody:
        $ref: "#/components/requestBodies/UpdateProduct"
      responses:
        200:
          description: give a single product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseSchema"

    patch:
      tags:
        - drugstore
      summary: update a product
      requestBody:
        $ref: "#/components/requestBodies/UpdateProduct"
      responses:
        200:
          description: give a single product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponseSchema"

    delete:
      tags:
        - drugstore
      summary: delete a product
      responses:
        204:
          description: Product deleted successfully.

  "/drugstore/product/{product_id}/price":
    parameters:
      - name: product_id
        in: path
        required: true
        schema:
          type: integer
    post:
      tags:
        - drugstore
      summary: update the product's price.
      requestBody:
        description: update the product's price by creating the new record of the PriceChange for the product.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PriceChange"
      responses:
        201:
          description: "updated successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceChange"

  "/drugstore/product/commitment/{plan_id}":
    parameters:
      - name: plan_id
        in: path
        required: true
        schema:
          type: integer
    get:
      parameters:
        - $ref: "#/components/parameters/PaginationOffsetParam"
        - $ref: "#/components/parameters/PaginationLimitParam"
        - $ref: "#/components/parameters/NameParam"
        - $ref: "#/components/parameters/DrugFormParam"
        - name: coverage
          in: query
          schema:
            type: integer
      tags:
        - drugstore
      summary: get the products and plan commitments
      responses:
        200:
          description: get the products and plan commitments
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                  previous:
                    type: string
                  products:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Product"
                      type: object
                      properties:
                        commitments:
                          allOf:
                            - $ref: "#/components/schemas/Commitment"
                          type: object
                          properties:
                            product:
                              type: integer

  "/drugstore/product/shortcut":
    post:
      tags:
        - drugstore
      summary: create a shortcut
      requestBody:
        $ref: "#/components/requestBodies/CreateShortcut"
      responses:
        201:
          description: Shortcut is created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shortcut"

    get:
      tags:
        - drugstore
      summary: get a list of shortcuts
      parameters:
        - $ref: "#/components/parameters/NamespaceParam"
        - name: product
          in: query
          required: false
          schema:
            type: integer
        - name: keyword
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: list of the shortcuts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  shortcuts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Shortcut"

  "/drugstore/product/shortcut/{shortcut_id}":
    parameters:
      - name: shortcut_id
        in: path
        required: true
        schema:
          type: integer

    get:
      tags:
        - drugstore
      summary: "get the shortcut"
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shortcut"

    put:
      tags:
        - drugstore
      summary: "Update the shortcut"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Shortcut"
              type: object
              properties:
                product:
                  readOnly: true
      responses:
        200:
          description: Shortcut is Updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shortcut"

    delete:
      tags:
        - drugstore
      summary: delete a shortcut
      responses:
        204:
          description: Shortcut deleted successfully.

  "/drugstore/product/attachment":
    post:
      tags:
        - drugstore
      summary: create an attached product relation
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AttachedProductRelation"
              type: object
              properties:
                product:
                  type: integer
                attached_product:
                  type: integer
      responses:
        201:
          description: Attachment relation is created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachedProductRelation"

    get:
      tags:
        - drugstore
      summary: get a list of the product attachment relation
      parameters:
        - name: product
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List the attachment relation due to the product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  attached_products:
                    type: array
                    items:
                      $ref: "#/components/schemas/AttachedProductRelation"

  "/drugstore/product/attachment/{attachment_id}":
    parameters:
      - name: attachment_id
        in: path
        required: true
        schema:
          type: integer

    get:
      tags:
        - drugstore
      summary: Retrieve the product attachment relation
      responses:
        200:
          description: Retrieve an attachment relation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachedProductRelation"

    put:
      tags:
        - drugstore
      summary: Update the product attachment relation
      requestBody:
        description: If you want to update the `product`, you should delete this record and create an other one.
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AttachedProductRelation"
              type: object
              properties:
                product:
                  readOnly: true
                attached_product:
                  type: integer
      responses:
        200:
          description: Attachment relation is updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachedProductRelation"

    delete:
      tags:
        - drugstore
      summary: delete the product attachment relation
      responses:
        204:
          description: delete the product attachment relation
  
  "/drugstore/product/product_category/drugs":
    get:
      tags:
        - drugstore
      summary: get a list of generic product_category
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
        - $ref: "#/components/parameters/NameParam"
        - $ref: "#/components/parameters/PaginationOffsetParam"
        - $ref: "#/components/parameters/PaginationLimitParam"
      responses:
        200:
          $ref: "#/components/responses/ProductCategoryListResponse"
          
  "/drugstore/product_category":
    parameters:
      - $ref: "#/components/parameters/RequiredNamespaceParam"
    post:
      tags:
        - drugstore
      summary: create a product category
      requestBody:
        $ref: "#/components/requestBodies/CreateProductCategory"
      responses:
        201:
          description: new Product Category has been created successfully.
          $ref: "#/components/responses/ProductCategory"

    get:
      parameters:
        - $ref: "#/components/parameters/NameParam"
        - name: product_type
          in: query
          required: false
          schema:
            type: string
        - name: parent
          in: query
          required: false
          schema:
            type: integer
      tags:
        - drugstore
      summary: get a list of product category
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_categories:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductCategory"

  "/drugstore/product_category/{category_id}":
    parameters:
      - name: category_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      summary: get an specific product category
      responses:
        200:
          description: get an specific product category
          $ref: "#/components/responses/ProductCategory"

    put:
      tags:
        - drugstore
      summary: update an specific product category
      requestBody:
        $ref: "#/components/requestBodies/UpdateProductCategory"
      responses:
        200:
          description: update an specific product category
          $ref: "#/components/responses/ProductCategory"

    delete:
      tags:
        - drugstore
      summary: delete an specific drug
      responses:
        204:
          description: delete an specific drug

  "/drugstore/product_category/{category_id}/drug":
    get:
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
      summary: get all drug products with the same generic drug.
      tags:
        - drugstore
      description: |
        In this endpoint the `product_type` is assumed to **drug**.
        The `category_id` should refer to a generic drug category and is for retrieving all drugs with the same generic drug.

         e.g. to get all drugs from **ACETAMINOPHEN** (generic drug).
      responses:
        200:
          description: get all drug items with the same generic.
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"

  "/drugstore/drug/form":
    get:
      summary: get all drug form
      description: |
        all the drug forms are listed in backend.
      tags:
        - drugstore
      responses:
        200:
          description: all the drug forms
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticDrugForm"

  "/drugstore/storage":
    post:
      tags:
        - drugstore
      summary: create a storage for the drugstore
      requestBody:
        $ref: "#/components/requestBodies/CreateStorage"
      responses:
        201:
          description: created a storage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storage"

    get:
      parameters:
        - $ref: "#/components/parameters/RequiredNamespaceParam"
      tags:
        - drugstore
      summary: get all storages for the drugstore
      responses:
        200:
          description: list of all storages
          content:
            application/json:
              schema:
                type: object
                properties:
                  storages:
                    type: array
                    items:
                      $ref: "#/components/schemas/Storage"
        400:
          $ref: "#/components/responses/BadFormResponse"

  "/drugstore/storage/{storage_id}":
    parameters:
      - name: storage_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      responses:
        200:
          description: done
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storage"
    put:
      tags:
        - drugstore
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Storage"
              type: object
              properties:
                namespace:
                  readOnly: true

      responses:
        200:
          description: done
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Storage"
    delete:
      tags:
        - drugstore
      responses:
        200:
          description: done

  "/drugstore/storage/{storage_id}/stats":
    parameters:
      - name: storage_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - drugstore
      responses:
        200:
          $ref: "#/components/responses/StorageDailyStatsResponse"
        404:
          description: "`Not Found`"
    # put:
    #   tags:
    #     - drugstore
    #   requestBody:
    #     $ref: "#/components/requestBodies/CreateStorage"
    #   responses:
    #     200:
    #       description: created a storage
    #       content:
    #         application/json:
    #           schema:
    #             $ref: "#/components/schemas/Storage"

  # "/drugstore/storage/{storage_id}/inventory/{inventory_id}":
  #   parameters:
  #     - name: storage_id
  #       in: path
  #       required: true
  #       schema:
  #         type: integer
  #     - name: inventory_id
  #       in: path
  #       required: true
  #       schema:
  #         type: integer
  #     - $ref: "#/components/parameters/RequiredNamespaceParam"
  #   delete:
  #     tags:
  #       - drugstore
  #     responses:
  #       200:
  #         description: Inventory deleted successfully.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: |
            identifier of the user
        username:
          description: user's mobile number
          type: string
          pattern: r"^989\d{9}$"
          example: "989111234567"

        first_name:
          type: string
          example: John

        last_name:
          type: string
          example: Doe

        dob:
          type: string
          format: YYYY-mm-dd
          example: "2019-03-17"

        national_id:
          type: string
          example: "2080387612"
          maxLength: 11
          minLength: 11

        profile_picture:
          description: profile image url
          type: string
          example: /media/1334212310.jpg
          nullable: true

        # domains:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/Hospital"

    UserSummary:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/User/properties/id"
        first_name:
          $ref: "#/components/schemas/User/properties/first_name"
        last_name:
          $ref: "#/components/schemas/User/properties/last_name"

    UserSummaryWithUsername:
      allOf:
        - $ref: "#/components/schemas/UserSummary"
        - type: object
          properties:
            username:
              $ref: "#/components/schemas/User/properties/username"

    UserCreation:
      allOf:
        - type: object
          required:
            - username
            - password
            - namespace
          properties:
            username:
              $ref: "#/components/schemas/User/properties/username"
            password:
              type: string
            namespace:
              type: integer
        - $ref: "#/components/schemas/UserSummary"
        - $ref: "#/components/schemas/WriteNamespaceAccess"

    WriteNamespaceAccess:
      type: object
      properties:
        is_assignee:
          type: boolean
          description: whether the user is an assignee of the namespace (i.e. has access to all clinics without explicit clinic access definitions)
        clinics:
          type: array
          items:
            type: integer
        permissions:
          $ref: "#/components/schemas/PermissionsMapping"

    NamespaceAccess:
      allOf:
        - $ref: "#/components/schemas/WriteNamespaceAccess"
        - type: object
          properties:
            clinics:
              type: array
              items:
                $ref: "#/components/schemas/Clinic"
            is_owner:
              type: boolean
              default: false
              description: whether the user is the owner of the namespace

    UserWithNamespaceAccess:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            namespace_access:
              $ref: "#/components/schemas/NamespaceAccess"

    UserSelfInfo:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            namespaces:
              type: array
              items:
                $ref: "#/components/schemas/NamespaceWithAccess"

    Namespace:
      type: object
      description: see main notes of the document
      properties:
        id:
          type: integer
        title:
          type: string
          nullable: true

    NamespaceWithAccess:
      allOf:
        - $ref: "#/components/schemas/Namespace"
        - type: object
          properties:
            access:
              $ref: "#/components/schemas/NamespaceAccess"

    PermissionsMapping:
      description: |
        each key in this object is a `permission` name and its value indicates whether the user has the permission in the specified namespace
      type: object
      properties:
        permission:
          type: boolean
      example:
        "write_demographic": true
        "read_clinical": true
        "write_clinical": true
        "aggregate_data": true
        "manage_form": false
        "manage_user": false
        "manage_clinic": false

    PatientEdition:
      allOf:
        - type: object
          description: |
            NOTE: These fields are always required; `first_name`, `last_name`, `national_id`, `has_national_id`, `gender`
          properties:
            first_name:
              type: string
              nullable: true
              example: John

            last_name:
              type: string
              nullable: true
              example: Doe

            father_name:
              type: string
              nullable: true
              example: Joey

            gender:
              type: string
              description: one char value from {Male, Female, Other}
              nullable: true
              enum:
                - M
                - F
                - O
            dob:
              type: string
              description: date of birth
              format: YYYY-mm-dd
              example: "2019-03-17"
              nullable: true

            nationality:
              allOf:
                - $ref: "#/components/schemas/Nationality/properties/id"
                - nullable: true

            national_id:
              description: |
                national_id xor foreign_code (کد اتباع)
              type: string
              example: 2090116508
              nullable: true

            has_national_id:
              description: |
                indicates whether the national_id field contains a `national ID` or `foreign_code`
              type: boolean
              example: true

            birth_location:
              allOf:
                - $ref: "#/components/schemas/City/properties/id"
                - nullable: true

            marital_status:
              type: string
              description: one char value from {Single, Married}
              nullable: true
              enum:
                - S
                - M
            note:
              type: string
              nullable: true
              maxLength: 1000
              example: "blah blah blah"

            incognito:
              type: boolean
              example: False
              description: |
                If the patient is incognito, all fields except id
                can be null. If not, `first_name`, `last_name` and `gender` are required.
        - $ref: "#/components/schemas/ResidencyModel"
        - type: object
          properties:
            attending_clinics:
              type: array
              items:
                type: integer

    PatientCreation:
      allOf:
        - type: object
          properties:
            namespace:
              $ref: "#/components/schemas/Namespace/properties/id"
        - $ref: "#/components/schemas/PatientEdition"

    Patient:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              description: identifier of the patient inside the specified namespace
              example: 456789
        - $ref: "#/components/schemas/PatientEdition"
        - type: object
          properties:
            created:
              type: string
              description: the time user is created
              format: datetime
              example: "2019-03-17T12:00:00+0330"
              nullable: true
            last_admitted:
              type: string
              format: datetime
              example: "2019-03-17T12:00:00+0330"
            modified:
              type: string
              description: each time user changes patient
              format: datetime
              example: "2019-03-17T12:00:00+0330"
              nullable: true
            last_editor:
              allOf:
                - $ref: "#/components/schemas/UserSummary"
                - nullable: true
            attending_clinics:
              type: array
              items:
                $ref: "#/components/schemas/Clinic"

    Admission:
      allOf:
        - $ref: "#/components/schemas/AdmissionCore"
        - $ref: "#/components/schemas/ResidencyModel"
        - type: object
          properties:
            patient:
              allOf:
                - $ref: "#/components/schemas/Patient"

    AdmissionCore:
      type: object
      properties:
        id:
          type: integer
          description: |
            identifier of the admission

        admitted:
          type: string
          format: datetime
          example: "2019-03-17T12:00:00+0330"

        type:
          $ref: "#/components/schemas/AdmissionType"

        insurance_type:
          allOf:
            - $ref: "#/components/schemas/InsuranceType"
            - nullable: true

        insurance_number:
          type: string
          nullable: true
          example: "723"

        arrival_mode:
          $ref: "#/components/schemas/ArrivalMode"

        companion_first_name:
          type: string
          nullable: true

        companion_last_name:
          type: string
          nullable: true

        companion_relation:
          type: string
          nullable: true

        is_dismissed:
          type: boolean
          nullable: true

        dismissed:
          description: |
            If is_dismissed==true, this field must be set
          type: string
          nullable: true
          format: datetime
          example: "2019-03-20"

    Nationality:
      type: object
      properties:
        id:
          type: string
          example: US
        title:
          type: string
          example: ایالات متحده

    ResidencyModel:
      type: object
      properties:
        city:
          allOf:
            - $ref: "#/components/schemas/City/properties/id"
            - nullable: true

        street:
          type: string
          nullable: true
          description: "rest of the address (more detailed than city; terminology comes from https://tools.ietf.org/html/rfc6350#section-6.3.1)"
          example: "St 16th, B 14"

        phone_number_1:
          nullable: true
          type: string
          pattern: r"^98\d{10}$"
          example: "989111234567"

        phone_number_2:
          nullable: true
          type: string
          pattern: r"^989\d{9}$"
          example: "989111234567"

    Province:
      type: object
      description: |
        province ID based on `ostan` table from

          <a href="https://github.com/ahmadazizi/iran-cities/tree/2.0/releases/v2.0">
          https://github.com/ahmadazizi/iran-cities/tree/2.0/releases/v2.0
          </a>
      properties:
        title:
          type: string
          example: مازندران

        id:
          type: integer
          example: 27

    City:
      type: object
      description: |
        city based on `shahr` table (only `shahr_type` == 0) from
            <a href="https://github.com/ahmadazizi/iran-cities/tree/2.0/releases/v2.0">
            https://github.com/ahmadazizi/iran-cities/tree/2.0/releases/v2.0
            </a>

      properties:
        id:
          type: integer
          example: 742
        title:
          type: string
          example: "ساری"
        # ostan:
        #   $ref: "#/components/schemas/Province"
        shahr_type:
          type: integer
          example: 0
        bakhsh:
          type: integer
          example: 593
        shahrestan:
          type: integer
          example: 224

    AdmissionType:
      type: object
      properties:
        id:
          type: string
          example: clinical

        title:
          type: string
          example: خدماتی

    ArrivalMode:
      type: object
      properties:
        id:
          type: string
          example: personal

        title:
          type: string
          example: شخصی

    InsuranceType:
      type: object
      properties:
        id:
          type: string
          example: "thritaEHR.insurer.1"
        title:
          type: string
          example: تأمین اجتماعی

        # Hospital:
        #   type: object
        #   required:
        #     - title
        #     - base_url
        #     - secret_key
        #   properties:
        #     id:
        #       type: string
        #       example: "123456789"
        #     title:
        #       type: string
        #       example: سینا
        #     base_url:
        #       type: string
        #       example: "sinahospital.tums.ac.ir"

        secret_key:
          type: string
          maxLength: 256
          minLength: 256
          example: "68e656b251e67e8358bef8483ab0d51c6619f3e7a1a9f0e75838d41ff368f728"

    ReportImage:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          example: "/media/1334212131.jpg"

    ReportCore:
      type: object
      properties:
        content:
          type: string
          example: "blah blah blah"
        reported: # previously was date
          type: string
          format: "datetime|date"
          description: can be datetime or date
          example: "2019-03-17T03:30:00+0430"
        requester:
          type: string
          nullable: true
          example: "dr.who"
        provider:
          type: string
          nullable: true
          example: "sina hospital"

    ReportEdition:
      allOf:
        - type: object
          properties:
            report_type_id:
              $ref: "#/components/schemas/ReportType/properties/id"
            location_ids:
              type: array
              items:
                $ref: "#/components/schemas/ReportLocation/properties/id"
            admission_id:
              allOf:
                - $ref: "#/components/schemas/AdmissionCore/properties/id"
                - nullable: true
        - $ref: "#/components/schemas/ReportCore"

    ReportCreation:
      allOf:
        - type: object
          properties:
            patient_id:
              type: integer
        - $ref: "#/components/schemas/ReportEdition"

    Report:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 1
              readOnly: true
            patient:
              $ref: "#/components/schemas/Patient"
            submitter:
              $ref: "#/components/schemas/UserSummary"
            report_type:
              $ref: "#/components/schemas/ReportType"
            locations:
              type: array
              items:
                $ref: "#/components/schemas/ReportLocation"
            admission: # TODO: AdmissionSummary (exclude patient and some other properties)
              allOf:
                - $ref: "#/components/schemas/Admission"
                - nullable: true
        - $ref: "#/components/schemas/ReportCore"
        - type: object
          properties:
            images:
              type: array
              items:
                $ref: "#/components/schemas/ReportImage"

    ReportLocation:
      type: object
      properties:
        id:
          type: string
          example: "L.LP213584-8.LP251119-6"
        name:
          type: string
          example: "chest"

    ReportType:
      type: object
      properties:
        id:
          type: string
          example: "L.LP208893-0.LP200070-3"
        name:
          type: string
          example: "radiology"

    LabTestFactor:
      type: object
      properties:
        id:
          type: integer
          example: 164
        name:
          type: string
          example: WBC
        default_unit:
          type: string
          example: mg/dL
        default_normal_range:
          type: string
          example: min 3200 and max 8000
        is_important:
          type: boolean
          default: false
          description: indicates important factor

    SearchedLabTestGroup:
      allOf:
        - $ref: "#/components/schemas/LabTestFactor"
        - type: object
          properties:
            group:
              $ref: "#/components/schemas/LabTestGroupCore"

    LabTestValueBaseModel:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/lab_test_value_id"
        factor_id:
          $ref: "#/components/schemas/factor_id"
        value:
          type: string
          description: null when the value is not reported
          example: "11200"
        description:
          type: string
          description: possible null value
          example: This is the description of this WBC result.
        unit:
          type: string
          description: possible null value
          example: mg/cc
        normal_range:
          type: string
          description: possible null value
          example: min 2000 and max 10000

    lab_test_value_id:
      type: string
      example: "4686558568404597143"

    factor_id:
      type: integer
      example: 164

    LabTestValue:
      allOf:
        - $ref: "#/components/schemas/LabTestValueBaseModel"
        - type: object
          properties:
            abnormal:
              type: boolean
              description: indicates abnormal result
              example: true

    LabTestResultCore:
      type: object
      properties:
        issued_datetime:
          type: string
          format: datetime
        report_datetime:
          type: string
          format: datetime
          nullable: true

    LabTestResult:
      allOf:
        - $ref: "#/components/schemas/LabTestResultCore"
        - type: object
          properties:
            id:
              type: integer
            values:
              type: array
              items:
                $ref: "#/components/schemas/LabTestValue"

    LabTestResultEdition:
      allOf:
        - $ref: "#/components/schemas/LabTestResultCore"
        - type: object
          properties:
            values:
              type: array
              items:
                type: object
                properties:
                  factor_id:
                    $ref: "#/components/schemas/LabTestFactor/properties/id"
                  value:
                    type: string

    FormExportRequestBody:
      type: object
      required:
        - "export_config"
      properties:
        export_config:
          $ref: "#/components/schemas/FormExportConfig"
    
    FormExportResponseBody:
      type: object      
      properties:
        export_file:
          type: string
          description: Last exported file for the requested form.
        export_status:
          type: string
          description: The status of your current request. E is empty, D is doing and G is generated.
          enum:
            - "E"
            - "D"
            - "G"
        export_requested_at:
          type: string
          description: Datetime of starting processing on your request to generate the desrired report.
        export_config:
          $ref: "#/components/schemas/FormExportConfig"

    FormExportConfig:
      type: object
      properties:
        flat:
          type: boolean
          nullable: false
          description: If flat is true, choices and others parts of any select fields will be separated into two columns at form export (values at each column containing an array - see the definition of separator for more details). If the name of a select field is select_field, then the label of those two exported columns will be select_field (choices) and select_field (others) respectively.
          default: false
        separator:
          type: string
          nullable: true
          description: If separator is a character, it will be used to simplify the representation of top-level arrays at form exports. For example, if separator is ";", The array ["1","2"] will be represented as 1;2
          default: ";"
        choice_repr:
          type: string
          nullable: true
          description: \[["1", "first_label"],["2", "second_label"]] became ["first_label","second_label"] if `choice_repr=label`, ["1","2"] if `choice_repr=id` and no change if `choice_repr=null`
          default: "id"
        headers:
          type: string
          nullable: false
          description: The headers property describes the header name of each field (including groups) in the exported file. The values "labels" and "names" are self-explanatory. If headers is "keys", those fields without a key will have an empty header in the exported file. If headers is "keys+labels", the header of each field will be its key if it has a key, or its label otherwise.
          default: "labels"
          enum:
            - "labels"
            - "keys"
            - "keys+labels"
            - "names"

    LabTestResultCreation:
      allOf:
        - type: object
          properties:
            patient_id:
              type: integer
        - $ref: "#/components/schemas/LabTestResultEdition"

    LabTestImage:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          example: "/media/1334212131.jpg"

    LabTestImagesResult:
      allOf:
        - $ref: "#/components/schemas/LabTestResultCore"
        - type: object
          properties:
            images:
              type: array
              items:
                $ref: "#/components/schemas/LabTestImage"

    LabTestGroupCore:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          example: CBC
        reporter_section: # TODO: check if it is not used then remove it
          type: string
          example: Laboratory

    LabTestGroup:
      allOf:
        - $ref: "#/components/schemas/LabTestGroupCore"
        - type: object
          properties:
            factors:
              type: array
              items:
                $ref: "#/components/schemas/LabTestFactor"
            results:
              type: array
              items:
                $ref: "#/components/schemas/LabTestResult"

    LabTestImagesGroup:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/LabTestImagesResult"

    #    GenericDrug:
    #      type: object
    #      properties:
    #        id:
    #          type: string
    #        name:
    #          type: string
    #          example: ACETAMINOPHEN

    Drug:
      type: object
      properties:
        id:
          type: string
          # TODO: example
        name:
          type: string
          example: ACETAMINOPHEN (TYLOPHEN)
    #        generic:
    #          $ref: "#/components/schemas/GenericDrug"

    DrugForm:
      type: object
      properties:
        id:
          type: string
          # TODO: example
        name:
          type: string
          example: Tab

    DrugStrength:
      type: object
      properties:
        id:
          type: string
          # TODO: example
        name:
          type: string
          example: 125mg

    DrugFormWithFeasibilities:
      allOf:
        - $ref: "#/components/schemas/DrugForm"
        - type: object
          properties:
            strengths:
              type: array
              items:
                $ref: "#/components/schemas/DrugStrength"

    DrugWithFeasibilities:
      allOf:
        - $ref: "#/components/schemas/Drug"
        - type: object
          properties:
            forms:
              type: array
              items:
                $ref: "#/components/schemas/DrugFormWithFeasibilities"

    PrescribedDrug:
      type: object
      description: |
        Any PrescribedDrug has `id` and `description`.

        Standard drug has `drug`, `drug_form`, and `drug_strength` (other properties are null).

        Verbatim drug has `vb_drug`, `vb_drug_form`, and `vb_drug_strength` (other properties are null).

        These properties are mutual exclusive;
        i.e. no property of verbatim drug can be set when a standard drug property is set, and vice versa.
      properties:
        id:
          type: integer
          readOnly: true
        drug_id:
          allOf:
            - $ref: "#/components/schemas/Drug/properties/id"
            - writeOnly: true
              description: sent at request bodies instead of `drug`
              nullable: true
        drug:
          allOf:
            - $ref: "#/components/schemas/Drug"
            - readOnly: true
              nullable: true
        vb_drug:
          type: string
          description: verbatim drug
          nullable: true
        drug_form_id:
          allOf:
            - $ref: "#/components/schemas/DrugForm/properties/id"
            - writeOnly: true
              nullable: true
              description: sent at request bodies instead of `drug_form`
        drug_form:
          allOf:
            - $ref: "#/components/schemas/DrugForm"
            - readOnly: true
              nullable: true
        vb_drug_form:
          type: string
          description: verbatim drug form
          nullable: true
        drug_strength_id:
          allOf:
            - $ref: "#/components/schemas/DrugStrength/properties/id"
            - writeOnly: true
              nullable: true
              description: sent at request bodies instead of `drug_strength`
        drug_strength:
          allOf:
            - $ref: "#/components/schemas/DrugStrength"
            - readOnly: true
              nullable: true
        vb_drug_strength:
          type: string
          description: verbatim drug strength
          nullable: true
        description:
          type: string
          default: ""

    Prescription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        prescriber:
          type: object
          readOnly: true
          description: |
            This will be set to the submitting user for new prescriptions,
            and will be updated to the editing user on each prescription edit.
          properties:
            first_name:
              type: string
              readOnly: true
              example: John
            last_name:
              type: string
              readOnly: true
              example: Doe
        prescribed:
          type: string
          format: datetime # %Y-%m-%dT%H:%M:%S%z (https://strftime.org/)
          description: datetime of the prescription
        prescribed_drugs:
          type: array
          items:
            $ref: "#/components/schemas/PrescribedDrug"

    PrescriptionCreation:
      allOf:
        - $ref: "#/components/schemas/Prescription"
        - type: object
          properties:
            patient_id:
              type: integer
              writeOnly: true

    SynFormStageFile:
      type: object
      description: ""
      properties:
        file:
          type: string
          format: relative-url
          example: "/media/1334212310.jpg"
        created:
          type: string
          format: datetime
          readOnly: true
        uploader:
          description: "foreign key to the User Model"
          type: integer

    SynFormEntryFileStage:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              readOnly: true
              example: 1
            field_name:
              type: string
              pattern: "[A-Za-z][\\w]*"
        - $ref: "#/components/schemas/SynFormStageFile"

    FormEntryEdition:
      type: object
      description: |
        A filled instance of the form to be submitted, containing values for each field in the form.

        See the main description of the document for more details.
      properties:
        content:
          type: object
          example: { "feeling": "fatigue", "triage_level": 3 }

    Clinic:
      type: object
      properties:
        id:
          type: integer
          example: 57
          readOnly: true
        name:
          type: string
          example: "miss Shirzad"
        start_time:
          type: string
          format: "time"
          example: "09:30:00"
        start_tz:
          type: string
          example: "Asia/Tehran"

    OldField:
      type: object
      properties:
        name:
          description: the ID (and name of the corresponding HTML DOM) of the field type that is unique across all field types
          type: string
          example: sleep_status
        label:
          type: string
          example: وضعیت خواب
        type:
          type: string
          enum:
            - text
            - textarea
            - radios
            - checkboxes
          example: checkboxes
        value:
          description: |
            if the type is `checkboxes`, value contains semicolon-separated strings of all selected choices

            NOTICE: If creating a new form, it is an optional dynamic initial value for the field based on some attributes of the form (.e.g patient properties);
            so it should be only used when the API response is received and must not be stored.
          type: string
          nullable: true
          example: "Abnormal;Continence;RLS"
        max_length:
          description: optional max length (valid if the type is `text` or `textarea`)
          type: integer
          nullable: true
        choices:
          description: allowed choices (valid if the type is `radios` or `checkboxes`)
          type: array
          items:
            type: string
          example:
            - Normal
            - Abnormal
            - Start
            - Continence
            - RBD
            - RLS
            - Snoring
        # pattern:
        #   description: This is the pattern of valid values of this field type, represented by a regex (starting with ^ and ending with $) or a custom identifier which the client knows how to validate (e.g. email). Validation of the pattern is be done at the client-side.
        #   type: string
        #   nullable: true
        #   example: '^\+\d{12}$'
        order:
          type: integer

    OldFormSection:
      type: object
      properties:
        # id:
        #   description: the ID of the section that is unique across all sections (main or not)
        #   type: string
        #   example: complaints
        title:
          type: string
          example: شکایات
        # subsections:
        #   description: a (possibly empty) list of objects of the same model <code>OldFormSection</code>
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/OldFormSection'
        fields:
          type: array
          items:
            $ref: "#/components/schemas/OldField"
        order:
          type: integer

    OldFormCore:
      type: object
      properties:
        form_type:
          type: string
          description: the ID of the form structure
        sections:
          type: array
          items:
            $ref: "#/components/schemas/OldFormSection"

    OldFormStructure:
      allOf:
        - type: object
          properties:
            #            namespace:   # redundant
            #              type: string
            title:
              type: string
              example: شرح حال
        - $ref: "#/components/schemas/OldFormCore"

    OldFormSummary:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              readOnly: true
              example: 1
            created:
              type: string
              format: datetime
        - $ref: "#/components/schemas/OldFormCore"

    OldForm:
      allOf:
        - $ref: "#/components/schemas/OldFormSummary"
        - type: object
          properties:
            patient:
              $ref: "#/components/schemas/Patient"

    OldFormEdition:
      type: object
      properties:
        field_value_map:
          type: object
          description: a mapping (dictionary) of field names to provided values

    OldFormCreation:
      allOf:
        - type: object
          properties:
            patient_id:
              type: integer
        - $ref: "#/components/schemas/OldFormEdition"

    #    FormWithEntries:
    #      allOf:
    #        - $ref: "#/components/schemas/Form"
    #        - type: object
    #          description: ""
    #          properties:
    #            entries:
    #              type: array
    #              items:
    #                $ref: "#/components/schemas/FormEntry"

    SynFormFileEntry:
      type: object
      description: ""
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        form_entry:
          type: integer
          description: "foreign key to the SynFormEntry"
          nullable: true
        field_name:
          type: string
          pattern: "[A-Za-z][\\w]*"
        file:
          type: string
          format: relative-url
          example: "/media/1334212310.jpg"
        created:
          type: string
          format: datetime
          readOnly: true
        uploader:
          description: "foreign key to the User Model"
          type: integer
    FormEntry:
      type: object
      description: |
        A filled and submitted instance of the form, containing values for each field in the form.

      #        NOTE: There are always basic fields (including "id" as the identifier) in the form entry.
      #        See the main description of the document for more details.
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        subject_id:
          type: integer
          description: "[CREATION_ONLY]"
          example: 42
        created:
          type: string
          format: datetime
          readOnly: true
          example: "2020-12-9T12:00:00+0330"
        modified:
          type: string
          format: datetime
          readOnly: true
          example: "2020-12-9T16:00:00+0330"
        content:
          type: object
          example: { "feeling": "fatigue", "triage_level": 3 }
    #      properties:
    #        field_name:
    #          type: string
    #          description: mapping of a field name to its value, which is an integer or a string (based on the field type)
    #          example: "value"
    #          format: "integer|string"

    FormEntrySubmission:
      type: object
      description: |
        A filled instance of the form to be submitted, containing values for each field in the form.

        See the main description of the document for more details.
      properties:
        subject_id:
          type: integer
          description: "[CREATION_ONLY]"
          example: 42
        content:
          type: object
          example: { "feeling": "fatigue", "triage_level": 3 }

    Form:
      type: object
      description: |
        a.k.a. `FormStructure`

        Each form is created and managed by one organization defined by a namespace, and each organization has only access to its own forms.
      properties:
        name:
          type: string
          description: |
            the identifier of the form

            `name` structure: "{namespace}${handle}" (e.g. "1$medical_history")
          readOnly: true
          pattern: "[\\w$]+"
        suggested_handle:
          type: string
          description: |
            A handle which can be suggested by the client at creation of the form to be used at the `name` generation.

            If not passed, the system tries to extract a handle from the `title`.
            If it fails (e.g. non-English or duplicate title), a random handle will be chosen.
          writeOnly: true
          pattern: "[a-zA-Z]\\w{3,}"
          nullable: true
        namespace:
          type: string
          description: "[CREATION_ONLY] identifier of the namespace"
          writeOnly: true
        subject_key:
          type: string
          description: subject key of the form
          example: patient
        title:
          type: string
          description: a user-provided title
        description:
          type: string
          description: description in a specific markup language format (e.g. HTML)
        algorithm:
          type: string
          description: The JavaScript code which runs on client-side.
          nullable: true
        order:
          type: number
          format: float
          description: meaningful for front to order the forms
          default: 0.0
        # image:
        #   type: string
        #   description: an image shown besides description
        #   readOnly: true
        #   format: url
        #   nullable: true
        export_file:
          type: string
          format: link
          description: "the url to download the export file."
          nullable: true
          readOnly: true
        export_status:
          type: string
          readOnly: true
          default: empty
          enum: ["empty", "doing", "generated"]
          description: |
            `empty` means there's no export file.

            `doing` means creating the export file is in process.

            `generated` means there's already one export file.
        export_requested_at:
          type: string
          format: datetime
          nullable: true
          readOnly: true
        presentation:
          $ref: "#/components/schemas/FormPresentation"
        fields:
          type: array
          description: |
            [NOT_ALLOWED_AT_CREATION] fields definitions of the form
          items:
            $ref: "#/components/schemas/Field"

    ReadClinicsField:
      type: object
      properties:
        clinics:
          readOnly: true
          description: |
            clinics' id that all belong to the namespace.

            `This atrribute isn't completed.`
          type: array
          items:
            $ref: "#/components/schemas/Clinic"

    WriteClinicsField:
      type: object
      properties:
        clinics:
          writeOnly: true
          description: |
            clinics' id that all belong to the namespace.

            `This atrribute isn't completed.`
          type: array
          items:
            type: integer

    SynSearchStringValue:
      description: one single string value when lookup_type is `matche`.
      type: string

    SynSearchListValue:
      description: two string values in a list when lookup_type is `range` (first is gte and second is lte).
      type: array
      items:
        type: string
      minLength: 1
      maxLength: 2

    SynSearchRequest:
      type: object
      example:
        {
            "operator": "and",
            "operands": [
                {
                    "structure": "2$form_a11rjasl",
                    "field": "text_1",
                    "lookup_type": "match",
                    "value": "item"
                },
                {
                    "structure": "2$form_a11rjasl",
                    "field": "text_2",
                    "lookup_type": "match",
                    "value": "item"
                }
            ]
        }
      properties:
        operator:
          description: Currently only `and` is supported.
          type: string
          enum:
            - "and"
            - "or"
        operands:
          description: List of operands to be searched with the given operator.
          type: array
          items:
            type: object
            properties:
              structure:
                description: form structure name or null.
                type: string
                nullable: true
              field:
                description: field name.
                type: string
              lookup_type:
                description: There are two kinds of search, match and range.
                type: string
                enum:
                  - "match"
                  - "range"
              value:
                oneOf:
                  - $ref: "#/components/schemas/SynSearchStringValue"
                  - $ref: "#/components/schemas/SynSearchListValue"

    SynSearchResponse:
      type: array
      example:
        [
          {
              "marital_status": "D",
              "nationality": "IR",
              "gender": "M",
              "city": 166,
              "dob": "2020-12-21T00:00:00",
              "namespace": 1,
              "birth_location": 166,
              "last_name": "موسیو",
              "id": 105,
              "first_name": "امیرحسین",
              "indicator_fields": {
                  "849": {
                      "text_1": "Item 2.1",
                      "structure": "2$form_a11rjasl",
                      "text_2": "Item 2.2"
                  },
                  "828": {
                      "text_1": "Item 1.1",
                      "structure": "2$form_a11rjasl",
                      "text_2": "Item 1.2"
                  },
                  "829": {
                      "text_1": "Item 2.1",
                      "structure": "2$form_a11rjasl",
                      "text_2": "Item 2.2"
                  }
              }
          }
      ]
      items:
        type: object
        properties:
          marital_status:
            description: Married, Single, Divorsed, Widow
            type: string
            enum:
              - M
              - S
              - D
              - W
          nationality:
            description: id of its related model.
            type: string
          gender:
            description: Male, Female, Other
            type: string
            enum:
              - M
              - F
              - O
          city:
            description: id of its related model.
            type: integer
          dob:
            description: date of birth.
            type: string
          namespace:
            description: id of its related model.
            type: integer
          birth_location:
            description: id of its related model.
            type: integer
          last_name:
            type: string
          id:
            description: patient primary key.
            type: integer
          first_name:
            type: string
          indicator_fields:
            type: object
            description: Keys are form entry ids and values are objects of search fields with their real value in db and the form structure.
            properties:
              form_id:
                type: object
                properties:
                  field_name:
                    type: string
    ReadForm:
      allOf:
        - $ref: "#/components/schemas/Form"
        - $ref: "#/components/schemas/ReadClinicsField"

    WriteForm:
      allOf:
        - $ref: "#/components/schemas/Form"
        - $ref: "#/components/schemas/WriteClinicsField"

    FormSummary:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Form/properties/name"
        title:
          $ref: "#/components/schemas/Form/properties/title"
        export_file:
          type: string
          format: link
          description: "the url to download the export file."
          nullable: true
          readOnly: true
        export_status:
          type: string
          readOnly: true
          default: empty
          enum: ["empty", "doing", "generated"]
          description: |
            `empty` means there's no export file.

            `doing` means creating the export file is in process.

            `generated` means there's already one export file.
        export_requested_at:
          type: string
          format: datetime
          nullable: true
          readOnly: true

    WriteFormSummary:
      allOf:
        - $ref: "#/components/schemas/FormSummary"
        - $ref: "#/components/schemas/WriteClinicsField"

    ReadFormSummary:
      allOf:
        - $ref: "#/components/schemas/FormSummary"
        - $ref: "#/components/schemas/ReadClinicsField"

    AllFormEntry:
      allOf:
        - type: object
          properties:
            structure:
              $ref: "#/components/schemas/FormSummary"
        - $ref: "#/components/schemas/FormEntry"

    FormPresentation:
      type: object
      description: |
        [PRESENTATION]

        Any presentation-related information of a form
        that has nothing to do with the data structure or content of the form.

        The actual definition and interpretation of the properties of this object is managed by frontend client
        and may change over time (in a backward compatible manner) independently from the backend server;
        i.e. the content of this object does not change any behaviour at the backend server.

        This object will be stored and retreived "AS IS", with no more validation than being a valid JSON object.

        Anyways, these are some suggested properties for the frontend client to start with:
      properties:
        #        sections:
        #          type: array
        #          items:
        #            $ref: "#/components/schemas/FormSection"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/GroupOfFields"

    #    FormSection:
    #      type: object
    #      description: |
    #        [PRESENTATION]
    #      properties:
    #        name:
    #          type: string
    #          description: the unique identifier of the section across sections of a form
    #        title:
    #          type: string
    #          description: the title of the section presented to the user (can be null for no title)
    #          nullable: true
    #        description:
    #          type: string
    #          description: description in a specific markup language format (e.g. HTML)
    #        order:
    #          type: number
    #          description: used for ordering sections
    #          format: float
    #         subsections:
    #           type: array
    #           items:
    #             $ref: "#/components/schemas/FormSection"

    GroupOfFields:
      type: object
      description: |
        [PRESENTATION]

        The order of the group is determined by the minimum order of the fields in the group.
      properties:
        name:
          type: string
          description: the unique identifier of the group across groups of a form
        type:
          type: string
          description: |
            Identifies the visualization of the group and which field positions the group needs
            (all are the interpretation of the frontend client).

            Example 1: "full_name" can be a group of two fields side-by-side,
            having two positions "first_name" and "last_name"

            Example 2: "choice_other" can be a group of two fields one at each row,
            having two positions "choice" and "other"

            See `FieldPresentation.link` for more details.
    #        order:   # replaced by implicit definition
    #          type: number
    #          description: used for ordering groups
    #          format: float
    #        placement:
    #          $ref: "#/components/schemas/Placement"

    #    Placement:
    #      type: object
    #      description: |
    #        [OPTIONAL]
    #
    #        placement in a specific section defined at the form presentation
    #      properties:
    #        section:
    #          type: string
    #          description: name of the section

    Field:
      type: object
      description: |
        Each field is contained in one form.
      properties:
        name:
          type: string
          description: |
            the unique identifier of the field across fields of the form

            NOTE: cannot use the name of basic fields for user defined fields.

            All `name`s and `suggested_name`s of the fields of the form structure must be unique at the form structure level.
          readOnly: true
          pattern: "[A-Za-z][\\w]*"
        suggested_name:
          type: string
          description: |
            [WIP]

            A name which can be suggested by the client at creation of the field to be used as the `name`.
            If no `suggested_name` is passed for a new field, the `name` will be randomly generated by the server.

            NOTE: cannot use the name of basic fields for user defined fields.

            The `suggested_name` is only valid for new fields; hence it cannot be set for a field having a `name`.

            All `name`s and `suggested_name`s of the fields of a form structure must be unique at the form structure level.

            The `suggested_name` is usually needed to be set for new group fields, so any group field can be used as the `parent` of other fields.
          writeOnly: true
          pattern: "[A-Za-z]\\w{3,}" # TODO: "[A-Za-z][\\w]*"
          nullable: true
        parent:
          type: string
          nullable: true
          description: |
            [WIP]

            [OPTIONAL] The identifier (`name`) of the group field which encloses this field
        label:
          type: string
          description: a user-provided label as plain text
        description:
          type: string
          description: description in plain text or in a specific markup language format (e.g. HTML)
        #        nullable:    # always nullable
        #          type: boolean
        #          default: true
        # blankable:  # always blankable
        #   type: boolean
        #   default: true
        omitted:
          type: boolean
          description: whether to not serialize this field when retrieving form entries
          default: false
        hidden:
          type: boolean
          description: "If true, this field doesn't show to the end user."
          default: false
        order:
          type: number
          description: |
            used for ordering fields

            NOTE: Fields in a group should have the same order (or orders with very small difference);
            This is useful in database exports to order linked fields together.
          format: float
        indexed:
          type: boolean
          description: |
            whether the field is indexed or not

            See the main description of the document for more details.
        data_type:
          type: string
          description: specified by each `XYZMetadata.type`
        metadata:
          allOf:
            - type: object
              description: |
                metadata of the field, containing data structure at database level and other validations

                NOTE: The property `type` may not be included here (inside `metadata`); you need to check `Field.data_type` in any case.
            - discriminator:
                propertyName: type
              oneOf:
                - $ref: "#/components/schemas/IntegerMetadata"
                - $ref: "#/components/schemas/FloatMetadata"
                - $ref: "#/components/schemas/DatetimeMetadata"
                - $ref: "#/components/schemas/DateMetadata"
                - $ref: "#/components/schemas/CharMetadata"
                - $ref: "#/components/schemas/TextMetadata"
                - $ref: "#/components/schemas/ChoiceMetadata"
                - $ref: "#/components/schemas/SelectMetadata"
                - $ref: "#/components/schemas/IntegerForeignKeyMetadata"
                - $ref: "#/components/schemas/StringForeignKeyMetadata"
                - $ref: "#/components/schemas/GroupMetadata"
                - $ref: "#/components/schemas/NoneMetadata"
                - $ref: "#/components/schemas/FileMetadata"
        inherent:
          type: object
          description: "[WIP] Any property inside `inherent` is read-only, and their values are usually based on `data_type`."
          properties:
            has_value:
              type: boolean
              default: true
              description: whether the field contains user-providable values or not
        key:
          type: string
          description: a user-defined name for a field to be used in the form algorithm.
          nullable: true
        presentation:
          $ref: "#/components/schemas/FieldPresentation"

    IntegerMetadata:
      type: object
      properties:
        type:
          type: string
          default: integer
        min:
          type: integer
          description: minimum allowed value
          nullable: true
        max:
          type: integer
          description: maximum allowed value
          nullable: true

    FloatMetadata:
      type: object
      properties:
        type:
          type: string
          default: float
        min:
          type: number
          format: float
          description: minimum allowed value
          nullable: true
        max:
          type: number
          format: float
          description: maximum allowed value
          nullable: true

    DatetimeMetadata:
      type: object
      properties:
        type:
          type: string
          default: datetime

    DateMetadata:
      type: object
      properties:
        type:
          type: string
          default: date

    CharMetadata:
      type: object
      description: one-line text
      properties:
        type:
          type: string
          default: char
        max_length:
          type: integer
          nullable: false

    TextMetadata:
      type: object
      description: multi-line text
      properties:
        type:
          type: string
          default: text
        max_length:
          description: |
            [OPTIONAL]
          type: integer
          nullable: true

    ChoiceMetadata:
      type: object
      properties:
        type:
          type: string
          default: choice
        min:
          type: integer
          description: minimum allowed number of selections
        max:
          type: integer
          description: maximum allowed number of selections
          nullable: true
        separator:
          deprecated: true
          type: string
          description: |
            [DEPRECATED] [OPTIONAL]

            the separator character which separates items in items or serialized value

            NOTE: The `separator` is used when the `items` is a single string (containing the `separator` character).
            For `items` being an array of strings, the `separator` must be ignored.
          default: "§"
        items:
          type: array
          items:
            type: string
          description: |
            An array of strings of all valid items that can be chosen.

            NOTE: Empty value is not a valid item.("" is not valid.)

        choice_source:
          type: string
          description: |
            [OPTIONAL]

            [WIP] Identifies where to look for choice items for the choice field
          example: icd11
          default: null
        restricted:
          type: boolean
          description: whether to limit submittable value(s) to valid items (defined by `items` and/or `choice_source`)
          default: true
        # allow_other:
        #   type: boolean
        #   description: |
        #     whether to allow submitting values other than predefined items

        #     NOTE: This cannot be allowed for restricted choice fields.
        pattern:
          type: string
          description: |
            [OPTIONAL]

            the regex pattern of allowed values to be submitted when submitted value(s) are unrestricted

            NOTE: `pattern` is only checked on submitted value(s) when it is set and `restricted==false`.

            NOTE: Use named groups for better database exports.

            NOTE: See this for more details on the provided example:
            <a href="https://regex101.com/r/bsIiIM/1">https://regex101.com/r/bsIiIM/1</a>
          default: null
          example: "^(?<nid>\\d+(?:\\/\\w+)?);(?<title>.*)$"

    SelectMetadata:
      type: object
      properties:
        type:
          type: string
          default: select
        min:
          type: integer
          description: minimum allowed number of selections
        max:
          type: integer
          description: maximum allowed number of selections
          nullable: true
        items:
          type: array
          items:
            type: array
            items:
              type: string
          example: '[["id_1", "First Label"], ["id_2", "Second Label"]]'
          description: |
            All valid items that can be chosen.

            Any item in `items` is a list which contains two elements (a two-element tuple).
            The first one is `id` and the second one is `label` of the item.
            Each `id` must match the regex pattern `^\w+$`,
            and must be unique in `items` of a select field (no duplicate ids allowed),
            but labels may be duplicated (this is discouraged though).

            example of `items`:

            `[["id_1", "First Label"], ["id_2", "Second Label"]]`

            NOTE: Empty string ("") is not valid for `id` or `label`.

            NOTE: The value of a select field in a form entry in the request body is an object with two keys:

            * `choices` - which contains a list of item ids.
            * `others` - which contains a list of arbitrary strings entered by the user as other options. (if the field is not `restricted`)

            example value at request body:

            `{"choices": ["id_2", "id_3"], "others": ["something", "something else"]}`

            NOTE: The value of a select field in a form entry in the response body is an object with two keys:

            * `choices` - which contains a list of items (a list of two-element tuples which is defined before).
            * `others` - which contains a list of arbitrary strings entered by the user as other options. (if the field is not `restricted`)

            example value:

            `{"choices": [["id_2", "2nd Label"], ["id_3", "3rd Label"]], "others": ["something", "something else"]}`

            NOTE: When rendering value of a select field in a form entry at the client,
                  the labels must be taken from its form structure (the label in the value must be ignored).
                  If the corresponding item is not found in the form structure, the item in the value must be ignored.

            example rendering labels (based on the three examples above):

            `choices: "Second Label" | others: "something", "something else"`

        choice_source:
          type: string
          description: |
            [OPTIONAL]

            [WIP] Identifies where to look for choice items for the choice field
          example: icd11
          default: null
        restricted:
          type: boolean
          description: whether to limit submittable value(s) to valid items (defined by `items` and/or `choice_source`)
          default: true
        pattern:
          type: string
          description: |
            [OPTIONAL]

            the regex pattern of allowed values to be submitted when submitted value(s) are unrestricted

            NOTE: `pattern` is only checked on submitted value(s) when it is set and `restricted==false`.

            NOTE: Use named groups for better database exports.

            NOTE: See this for more details on the provided example:
            <a href="https://regex101.com/r/bsIiIM/1">https://regex101.com/r/bsIiIM/1</a>
          default: null
          example: "^(?<nid>\\d+(?:\\/\\w+)?);(?<title>.*)$"

    IntegerForeignKeyMetadata:
      type: object
      description: |
        integer identifier of another object (e.g. Patient)

        NOTE: It is suggested to not append "_id" to end of the field name;
        e.g. use "patient" instead of "patient_id" for its field name.
      properties:
        type:
          type: string
          default: id

    StringForeignKeyMetadata:
      type: object
      description: |
        string identifier of another object (e.g. ICD11 Entry)
      properties:
        type:
          type: string
          default: key
        max_length:
          type: integer
          nullable: false

    GroupMetadata:
      type: object
      description: a special field used for grouping other fields
      properties:
        type:
          type: string
          default: group

    NoneMetadata:
      type: object
      description: a special field used for ordered descriptions between fields
      properties:
        type:
          type: string
          default: none

    FileMetadata:
      type: object
      properties:
        type:
          type: string
          default: file
        extensions:
          description: |
            list of extenstions for the input file.

            This list has to be a subset of the list SAFE_EXTENSIONS that is set in the server.
          type: array
          items:
            type: string

        max_size:
          type: integer
          description: "Its value should be less than FILE_FIELD_MAX_SIZE that is set in the server"

    FieldPresentation:
      type: object
      description: |
        [PRESENTATION]

        Any presentation-related information of a field
        that has nothing to do with the data structure or content of the field.

        The actual definition and interpretation of the properties of this object is managed by frontend client
        and may change over time (in a backward compatible manner) independently from the backend server;
        i.e. the content of this object does not change any behaviour at the backend server.

        This object will be stored and retreived "AS IS", with no more validation than being a valid JSON object.

        NOTE: This object is empty for basic fields.
        See the main description of the document for more details.

        Anyways, these are some suggested properties for the frontend client to start with:
      properties:
        schema:
          type: string
          description: |
            Identifies the visualization of the field (all is the interpretation of the frontend client).

            For example, schemas "short" and "long" can have different visualization for the same `char` data_type.
        required:
          type: boolean
          description: |
            whether it is required to be filled by user

            NOTE: an optional field which is not nullable cannot accept null value,
            but empty values (e.g. "") is accepted.
        invisible:
          type: boolean
          description: |
            whether to hide the field from the user to be filled automatically in background

            NOTE: all indexed fields (e.g. "patient") are usually always invisible
        #        placement:
        #          allOf:
        #            - $ref: "#/components/schemas/Placement"
        #            - description: |
        #                [OPTIONAL]
        #
        #                placement in a specific section defined at the form presentation
        #
        #                NOTE: This placement should be ignored if the field is linked
        #                in a group having a placement. [PRESENTATION]
        link:
          type: object
          description: |
            [OPTIONAL]

            link to a specific group of fields defined at the form presentation (or will be defined implicitly)
          properties:
            group:
              type: string
              description: name of the group
            position:
              type: string
              description: |
                The position of the field in the specified group.

                Example 1: position "first_name" is the position of the first field in the group "full_name"

                Example 2: position "other" is the second position in the group "choice_other"

                See `GroupOfFields.type` for more details.
            type:
              type: string
              description: |
                NOTE: This is not required if the group definition is always consistent at form presentation.

                If the group is not defined at the form presentation,
                this `type` will be used to identify the type of the group (i.e. implicit definition of the group)

                See `GroupOfFields.type` for more details.

    trigger_result_status:
      type: string
      description: |
        "none": none
        "normal": there is a normal result
        "abnormal": there is an abnormal result

    TokenPairResponseForHIS:
      type: object
      properties:
        access:
          type: string
          description: |
            include access token as bearer authoriztion header to authorize
            ```
            Authorization: Bearer <access>
            ```
        refresh:
          type: string
          description: |
            this token is used to obtain a new access token using `user/auth/refresh`
            (usually when the old one is expired)

            validity duration is short for `access` token and long for `refresh` token,
            and it is extended automatically for `refresh` token on each refresh operation

            if refresh token expires, user needs to login again

    BasicFields:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: datetime
          readOnly: true
        modified:
          type: string
          format: datetime
          readOnly: true

    Insurance:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        namespace:
          type: string
          description: "[CREATION_ONLY]"
          readOnly: true
        name:
          type: string
          example: بیمه تامین اجتماعی

    InsurancePlan:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        insurance:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Insurance"
        name:
          type: string
          example: "بیمه تکمیلی"
        subscription_code:
          type: string
        default_coverage:
          type: number
          default: 70
          description: The amount that the insuranc

    Drugstore:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        namespace:
          type: string
          readOnly: true
        dispensing_fee:
          type: object
          description: |
            The keys in this object is `1`, `2`, `3`. The values of these keys are number.
        handmade_dispensing_fee:
          type: object
          description: |
            The keys in this object is `1`, `2`, `3`, `4`. The values of these keys are number.

    ProductCategory:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        namespace:
          type: integer
        name:
          type: string
        product_type:
          type: string
          enum: [cosmetic, drug, medical_equipment]
        parent:
          description: If this field is  null and `product_type` is `drug`, the record refers to a **generic drug**.
          allOf:
            - $ref: "#/components/schemas/ProductCategory"
            
    ProductSubCategory:
      allOf:
        - $ref: '#/components/schemas/ProductCategory'
        - type: object
          properties:
            parent: 
              writeOnly: true
      type: object
      properties:
        namespace:
          type: integer
        name:
          type: string
        product_type:
          type: string
          enum: [cosmetic, drug, medical_equipment]
        sub_categories:
          description: children of this productcategory
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/ProductCategory"
              - type: object
                properties:
                  parent:
                    writeOnly: true

    Shortcut:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
        keyword:
          type: string
          description: This field should be unique.

    PriceChange:
      type: object
      description: |
        This model is created automatically by creating new parchase invoice.
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/BasicFields/properties/id"
        created:
          allOf:
            - $ref: "#/components/schemas/BasicFields/properties/created"
        price:
          type: integer
        material_unit_price:
          type: integer
          description: This number indicates the price per unit of the product.
          nullable: true
        product:
          allOf:
            - $ref: "#/components/schemas/Product"
          readOnly: true

    Product:
      description: |
        Backend will consider fields **persain_name**, **form**, **strength** and **erx** only when the product type is set on **drug**. In this case, fields **form**, **strength** are required.
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        namespace:
          type: string
        product_category:
          $ref: "#/components/schemas/ProductCategory"
        name:
          type: string
        description:
          type: string
        has_dispensing_fee:
          type: boolean
          default: true
        has_handmade_dispensing_fee:
          type: boolean
          default: false
        price:
          type: integer
        material_unit_price:
          type: integer
          description: This number indicates the price per unit of the product.
          nullable: true
        persain_name:
          type: string
        form:
          type: string
          description: this field has a choice list.
        strength:
          type: string
        erx:
          type: string
          nullable: true
          description: |
            This field represent the national code (standard code) for the drug.
        source:
          type: string
          description: |
            [WIP] This field indicates where this product refrence ids. It maybe `global`, `local` or the name of the org.

            `It's not finalized.`
        sid:
          type: integer
          description: |
            [WIP] This field indicates id in the source. It should be unique with source.

            `It's not finalized.`

    AttachedProductRelation:
      type: object
      description: |
        A product is normally sold with another products therefore we link them together by this model.
      properties:
        product:
          allOf:
            - $ref: "#/components/schemas/Product"
        attached_product:
          $ref: "#/components/schemas/Product"
        has_attached_dispensing_fee:
          type: boolean
          default: false
        count:
          type: integer

    Commitment:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        max_qty:
          type: integer
          nullable: true
        price:
          type: integer
          nullable: true
        effective_from:
          type: string
          format: datetime
          nullable: true
          description: The price is valid after this date.
        restrictions:
          type: object
          nullable: true
          description: |
            Backend needs to use this field therefore needs common keys.

            Common keys :
              * min_age
              * max_age
              * confirmation_required

            Maybe these keys change in future.
          example: { "min_age": 12, "confirmation_required": false }
        coverage:
          allOf:
            - $ref: "#/components/schemas/InsurancePlan/properties/default_coverage"
        has_speciality_restriction:
          type: boolean
          description: This field is just for indicating that we have speciality restriction.
        speciality:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/Speciality"
        insurance_plan:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/InsurancePlan"
        product:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Product"

    Storage:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        namespace:
          type: string
        name:
          type: string
        address:
          type: string

    DailyStats:
      type: object
      description: |
        This model is for keeping the history of the inventory items for each day.
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/BasicFields/properties/id"
        date:
          description: We calculate the inventories once a day.
          type: string
          format: date
          readOnly: true
        storage:
          $ref: "#/components/schemas/Storage"
        all_counts:
          type: object
          description: |
            All products' count will be stored in one json with this key
              * product_id

            for each product we have an object that has 5 keys:
              * available_count
              * sale_count
              * purchase_count
              * revision_count
              * transfer_count

            If the all counts are zero, we won't store the product and will remove it from the DailyStats list.

    Speciality:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/BasicFields/properties/id"
        name:
          type: string
        namespace:
          type: string

    CreationInvoiceItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/BasicFields/properties/id"
        created:
          $ref: "#/components/schemas/BasicFields/properties/created"
        uuid:
          type: string
          format: uuid4
        product:
          type: integer
          description: This field is null only when the is_handmade_drug is true.
          nullable: true
          writeOnly: true
        insurance_only:
          type: boolean
          default: false
          description: |
            This field indicates that patient share is zero or not. If this field is true, field reduce_storage will be false.
        reduce_storage:
          type: boolean
          default: true
          description: |
            This field shows that this product should reduce from storage or not.
        sold_in_piece:
          type: boolean
          default: false
          description: |
            This field indicated that the product is sold in pieces or units. Normaly this field is false except in handmade drugs.
        insurance_count:
          type: integer
          default: 0
          description: |
            The count of product that was calculated by Insurance role. This field is normally filled in sales invoices.
        not_insurance_count:
          type: integer
          description:
            The count of product that wasn't calculated by Insurance role and we use this field to store
            the quantity of the products in other type of the invoice too.
            Increasing or Decreasing the number of the product is represent through this field by the sign of the value.
        expiration_date:
          type: string
          format: datetime
          example: "2020-12-09"
        creation_serial:
          type: string
          example: "hsadK324"
        sale_price:
          type: integer
          default: 0
        total_cost:
          type: integer
          description: This field only required in purchase invoice and in other types of the invoice, this field is `read only`.
        payment_date:
          type: string
          format: date
        offer:
          type: boolean
          default: True
        # attached_to:
        #   nullable: true
        #   readOnly: true
        #   description: |
        #     This field is filled if the product has been attached to another product. It has one to many relation with itself.
        #   type: array
        #   items:
        #     allOf:
        #       - $ref: "#/components/schemas/CreationInvoiceItem"

    InvoiceItem:
      allOf:
        - $ref: "#/components/schemas/CreationInvoiceItem"
      type: object
      properties:
        invoice:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/Invoice"
        product:
          allOf:
            - $ref: "#/components/schemas/Product"
          readOnly: true
        product_name:
          type: string
          readOnly: True
        product_price:
          type: integer
          readOnly: true
          description: The price of the product that was sold.
        insurance_price:
          allOf:
            - $ref: "#/components/schemas/Commitment/properties/price"
          readOnly: true
        insurance_coverage:
          allOf:
            - $ref: "#/components/schemas/Commitment/properties/coverage"
          readOnly: true
        insurance_start_from:
          allOf:
            - $ref: "#/components/schemas/Commitment/properties/effective_from"
          readOnly: true

    Doctor:
      type: object
      properties:
        namespace:
          type: string
        mc_number:
          type: string
          description: a unique number medical association gives to a doctor
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: True
        speciality:
          type: array
          items:
            $ref: "#/components/schemas/Speciality"

    SecondParty:
      type: object
      properties:
        id:
          allOf:
            - $ref: "#/components/schemas/BasicFields/properties/id"
        namespace:
          type: string
        type:
          type: string
          enum: [seller, customer]
          description: |
            This field would represent that this record is for seller or customer.
        name:
          type: string
          nullable: true
        first_name:
          type: string
          nullable: true
        dob:
          type: string
          format: date
          nullable: true
        nationality_code:
          type: string
          nullable: true
        insurance_code:
          type: string
          description: patient's insurance code
        company_code:
          type: string
          nullable: true
          description: |
            company's economic code
        address:
          type: string
          nullable: true
        patient:
          nullable: true
          readOnly: true
          description: |
            This field will be activated if app Patient is added to the project.
          allOf:
            - $ref: "#/components/schemas/Patient"

    SummaryInvoice:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        insurance_plan:
          $ref: "#/components/schemas/InsurancePlan"
        invoice_total_cost:
          readOnly: true
          type: integer
        second_party:
          allOf:
            - $ref: "#/components/schemas/SecondParty"
          description: |
            Normally second party is a patient.
            If the type is `transfer` or `revise` this field should be null.
        seller_name:
          type: string
        storage:
          allOf:
            - $ref: "#/components/schemas/Storage"
          readOnly: true

    Invoice:
      allOf:
        - $ref: "#/components/schemas/SummaryInvoice"
      type: object
      properties:
        namespace:
          type: string
        operator:
          allOf:
            - $ref: "#/components/schemas/User"
          readOnly: true
        type:
          type: string
          description: |
            This field shows the type of transaction whether this is a purchase invoice, sales invoice‌,
            revise invoice or transfer invoice.

            'P' refers to 'purchase'

            'S' refers to 'sales'

            'R' refers to 'revise'

            'T' refers to 'transfer'
        serial_number:
          type: string
          example: "hsadK324"
        description:
          type: string
          example: "sth for description"
        discount:
          type: integer
        order:
          type: string
          example: "10-45"
          readOnly: true
        insurance_code:
          type: string
          description: patient's insurance code
        insurance_expiration:
          type: string
          format: date
          description: The expiration date of insurance booklet
        paper_invoice_date:
          type: string
          format: date
          description: e.g. The date of patient visits doctor
        prescription_code:
          type: string
        doctor_mc_number:
          type: string
          readOnly: True
        doctor_first_name:
          type: string
          readOnly: True
        doctor_last_name:
          type: string
          readOnly: True
        doctor_speciality:
          readOnly: True
          type: array
          items:
            $ref: "#/components/schemas/Speciality"
        doctor:
          $ref: "#/components/schemas/Doctor"
        storage:
          $ref: "#/components/schemas/Storage"
        related_invoice:
          description: |
            This field usually is null and is only filled if the invoice type is transfer.
          allOf:
            - $ref: "#/components/schemas/Invoice"

    Transaction:
      allOf:
        - $ref: "#/components/schemas/BasicFields"
      type: object
      properties:
        operator:
          allOf:
            - $ref: "#/components/schemas/UserSummary"
          readOnly: true
        invoice:
          allOf:
            - $ref: "#/components/schemas/Invoice"
          readOnly: true
        price:
          type: integer
        transaction_type:
          type: string
          description: r stands for Refund and p stands for Payment
          enum:
            - R
            - P
        payment_method:
          type: string
          description: c stands for Cash and p stands for POS
          enum:
            - P
            - C

    InsuranceResponseSchema:
      allOf:
        - $ref: "#/components/schemas/Insurance"
      type: object
      properties:
        plans:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/InsurancePlan"
              - type: object
                properties:
                  insurance:
                    writeOnly: true

    ProductResponseSchema:
      allOf:
        - $ref: "#/components/schemas/Product"
      type: object
      properties:
        price:
          allOf:
            - $ref: "#/components/schemas/Product/properties/price"
        shortcuts:
          type: array
          items:
            type: string
        attached_product:
          type: array
          items:
            $ref: "#/components/schemas/AttachedProductRelation"

    StaticDrugForm:
      type: object
      properties:
        forms:
          description: |
            This field is a list of tuples. Each tuple contains two items. The first one is the key for the option and the second one is the label.
          type: array
          items:
            type: array
            items:
              type: string

  requestBodies:
    loginBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: "user"
              password:
                type: string
                example: "password"
    createAdmissionBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  admitted:
                    $ref: "#/components/schemas/AdmissionCore/properties/admitted"
                  type:
                    allOf:
                      - $ref: "#/components/schemas/AdmissionType/properties/id"
                      - nullable: true

                  insurance_type:
                    allOf:
                      - $ref: "#/components/schemas/InsuranceType/properties/id"
                      - nullable: true

                  insurance_number:
                    $ref: "#/components/schemas/AdmissionCore/properties/insurance_number"

                  companion_first_name:
                    $ref: "#/components/schemas/AdmissionCore/properties/companion_first_name"

                  companion_last_name:
                    $ref: "#/components/schemas/AdmissionCore/properties/companion_last_name"

                  companion_relation:
                    $ref: "#/components/schemas/AdmissionCore/properties/companion_relation"

                  dismissed:
                    $ref: "#/components/schemas/AdmissionCore/properties/dismissed"

                  is_dismissed:
                    $ref: "#/components/schemas/AdmissionCore/properties/is_dismissed"

                  arrival_mode:
                    $ref: "#/components/schemas/ArrivalMode/properties/id"

                  patient: # TODO: replace with patient_id
                    type: integer
                    description: patient ID
                    example: 6

              - $ref: "#/components/schemas/ResidencyModel"

    createPatientBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PatientCreation"

    # TODO: summarize createAdmissionBody

    EditFormEntry:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FormEntryEdition"
    CreateForm:
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  namespace:
                    type: string
                    description: identifier of the namespace
              - $ref: "#/components/schemas/Form"

    SubmitFormEntry:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FormEntrySubmission"

    CreateInsurance:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Insurance"
            type: object
            properties:
              namespace:
                type: string
                readOnly: false
                description: identifier of the namespace

    CreateInsurancePlan:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/InsurancePlan"
            type: object
            properties:
              insurance:
                type: integer
                readOnly: false

    CreateCommitment:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Commitment"
            type: object
            properties:
              insurance_plan:
                type: integer
                readOnly: false
              product:
                type: integer
                readOnly: false
              speciality:
                type: array
                items:
                  type: integer

    CreateStorage:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Storage"

    CreateInvoice:
      description: |
        If an item has `ingredients`, it should have `product`.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Invoice"
            type: object
            properties:
              second_party:
                type: integer
              doctor:
                type: integer
              insurance_plan:
                type: integer
              storage:
                type: integer
              related_invoice:
                readOnly: true
              items:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/CreationInvoiceItem"
                  type: object
                  properties:
                    product:
                      type: integer
                    attachments:
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/CreationInvoiceItem"
                        type: object
                        properties:
                          product:
                            type: integer
                    ingredients:
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/CreationInvoiceItem"
                        type: object
                        properties:
                          product:
                            type: integer

    CreateTransferInvoice:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Invoice"
            type: object
            properties:
              second_party:
                readOnly: true
              discount:
                readOnly: true
              insurance_plan:
                readOnly: true
              insurance_code:
                readOnly: true
              prescription_code:
                readOnly: true
              prescription_date:
                readOnly: true
              insurance_expiration:
                readOnly: true
              doctor:
                readOnly: true
              storage:
                readOnly: true
              source_storage:
                type: integer
              dest_storage:
                type: integer
              related_invoice:
                readOnly: True
              items:
                type: array
                items:
                  $ref: "#/components/schemas/CreationInvoiceItem"

    ChangeInvoice:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Invoice"
            type: object
            properties:
              insurance_plan:
                type: integer
              items:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/CreationInvoiceItem"
                  type: object
                  properties:
                    handmade_item:
                      type: integer
                      nullable: true
              order:
                type: string
                readOnly: false

    CreateDoctor:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Doctor"
            type: object
            properties:
              speciality:
                description: a list of the speciality ids.
                type: array
                items:
                  type: integer

    UpdateDoctorRequest:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Doctor"
            type: object
            properties:
              speciality:
                description: a list of the speciality ids.
                type: array
                items:
                  type: integer
              namespace:
                readOnly: true

    CreateSecondParty:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecondParty"

    UpdateSecondParty:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SecondParty"
            type: object
            properties:
              namespace:
                readOnly: true

    CreateProduct:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Product"
            type: object
            properties:
              product_category:
                type: integer

    UpdateProduct:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Product"
            type: object
            properties:
              product_category:
                type: integer
              namespace:
                readOnly: true

    CreateAttachedProduct:
      content:
        application/json:
          schema:
            type: object
            properties:
              attached_products:
                type: array
                items:
                  type: object
                  properties:
                    product:
                      type: integer
                    attached_product:
                      type: integer
                    count:
                      type: integer
                    has_attached_dispensing_fee:
                      type: boolean

    CreateShortcut:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Shortcut"
            type: object
            properties:
              product:
                type: integer

    CreateProductCategory:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProductCategory"
            type: object
            properties:
              parent:
                type: integer

    UpdateProductCategory:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProductCategory"
            type: object
            properties:
              parent:
                type: integer
              namespace:
                readOnly: true

  responses:

    UserWithNamespaceAccessResponse:
      description: a user with his permissions in specific namespace.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserWithNamespaceAccess"

    FormEntriesResponse:
      description: filtered form entries
      content:
        application/json:
          schema:
            type: object
            properties:
              entries:
                type: array
                items:
                  $ref: "#/components/schemas/FormEntry"

    SubmittedFormEntryResponse:
      description: submitted form entry
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FormEntry"

    EditedFormEntryResponse:
      description: edited form entry
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FormEntry"

    SubmittedSynFormFileEntryResponse:
      description: submitted form file entry
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SynFormFileEntry"

    BadFormResponse:
      description: |
        bad form

        **NOTE:** see different variations at Schema
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "errors.yaml#/components/schemas/E_FORM_SUGGESTED_HANDLE_TOO_LONG"
              - $ref: "errors.yaml#/components/schemas/E_BAD_FORM"
              - $ref: "errors.yaml#/components/schemas/E_BAD_FORM_FIELDS"

    BadFormEntryQueryResponse:
      description: "unknown indexed_field(s) or bad offset/limit"
      content:
        {
          application/json:
            {
              schema: { $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST" },
            },
        }

    BadFormEntryResponse:
      description: "bad submitted fields"
      content:
        {
          application/json:
            {
              schema: { $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST" },
            },
        }

    FormNameNotFoundResponse:
      description: |
        form not found or not accessible

        **NOTE:** This error does not reveal whether the form name exists or not.
      content:
        {
          application/json:
            {
              schema:
                {
                  $ref: "errors.yaml#/components/schemas/E_FORM_NAME_NOT_FOUND",
                },
            },
        }

    FormEntryNotFoundResponse:
      description: |
        form entry or form not found

        **NOTE:** This error does not reveal whether the form name exists or not.
      content:
        {
          application/json:
            {
              schema:
                {
                  $ref: "errors.yaml#/components/schemas/E_FORM_ENTRY_NOT_FOUND",
                },
            },
        }

    SubmittedSynFormFileStageResponse:
      description: submitted form file structure
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SynFormStageFile"

    SubmittedSynFormEntryFileStageResponse:
      description: submitted form file entry
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SynFormEntryFileStage"

    StorageDailyStatsResponse:
      description: the newest storage's daily stats
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DailyStats"

    InsuranceResponse:
      description: get an insurance org.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InsuranceResponseSchema"

    InsuranceListResponse:
      description: get all insurance org.
      content:
        application/json:
          schema:
            type: object
            properties:
              insurances:
                type: array
                items:
                  $ref: "#/components/schemas/InsuranceResponseSchema"

    InvoicesListResponse:
      description: a page of all filtered invoices.
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
              previous:
                type: string
              invoices:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/SummaryInvoice"
                  type: object
                  properties:
                    insurance_plan:
                      $ref: "#/components/schemas/InsurancePlan"
                    related_storage:
                      $ref: "#/components/schemas/Storage"

    InvoiceCalculatorResponse:
      description: calculator
      content:
        application/json:
          schema:
            type: object
            properties:
              invoice_total_cost:
                type: integer
              insurance_total_cost:
                type: integer
              insurance_portion:
                type: integer
              patient_portion:
                type: integer
              non_insurance_cost:
                type: integer
              payable_amount:
                type: integer
              items:
                type: array
                items:
                  type: object
                  properties:
                    product:
                      type: integer
                    max_qty:
                      type: integer
                    sell_amount:
                      type: integer
                    insurance_total_cost:
                      type: integer
                    insurance_portion:
                      type: integer
                    patient_portion:
                      type: integer
                    non_insurance_cost:
                      type: integer

    DoctorResponse:
      description: a doctor.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Doctor"
            type: object
            properties:
              speciality:
                type: array
                items:
                  $ref: "#/components/schemas/Speciality"

    SpecialityListResponse:
      description: a list of the specialities.
      content:
        application/json:
          schema:
            type: object
            properties:
              specialities:
                type: array
                items:
                  $ref: "#/components/schemas/Speciality"

    DoctorListResponse:
      description: a list of the doctors.
      content:
        application/json:
          schema:
            type: object
            properties:
              doctors:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Doctor"
                  type: object
                  properties:
                    speciality:
                      type: array
                      items:
                        $ref: "#/components/schemas/Doctor"

    SecondPartyResponse:
      description: a second party.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SecondParty"

    InvoicesResponse:
      description: an invoice. `Note` **attachments** and **ingredients** don't come together in one response.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Invoice"
            type: object
            properties:
              product:
                writeOnly: false
                allOf:
                  - $ref: "#/components/schemas/Product"
              insurance_plan:
                $ref: "#/components/schemas/InsurancePlan"
              insurance_total_cost:
                type: integer
              insurance_portion:
                type: integer
              patient_portion:
                type: integer
              non_insurance_cost:
                type: integer
              payable_amount:
                type: integer
              items:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/InvoiceItem"
                  type: object
                  properties:
                    product:
                      writeOnly: false
                      allOf:
                        - $ref: "#/components/schemas/Product"
                    insurance_total_cost:
                      type: integer
                    insurance_portion:
                      type: integer
                    patient_portion:
                      type: integer
                    non_insurance_cost:
                      type: integer
                    payable_amount:
                      type: integer
                    attachments:
                      # readOnly: true
                      description: |
                        This field represent the all products were used in this handmade drug creation.
                        This field is not a column in the database and it is other side of the `handmade_drug` relation.
                        It isn't an empty list only if we want to model a handmade drug.
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/CreationInvoiceItem"
                        type: object
                        properties:
                          product:
                            writeOnly: false
                            allOf:
                              - $ref: "#/components/schemas/Product"
                          insurance_total_cost:
                            type: integer
                          insurance_portion:
                            type: integer
                          patient_portion:
                            type: integer
                          non_insurance_cost:
                            type: integer
                          payable_amount:
                            type: integer

                    ingredients:
                      # readOnly: true
                      description: |
                        This field represent the all products were used in this handmade drug creation.
                        This field is not a column in the database and it is other side of the `handmade_drug` relation.
                        It isn't an empty list only if we want to model a handmade drug.
                      type: array
                      items:
                        allOf:
                          - $ref: "#/components/schemas/CreationInvoiceItem"
                        type: object
                        properties:
                          product:
                            writeOnly: false
                            allOf:
                              - $ref: "#/components/schemas/Product"
                          insurance_total_cost:
                            type: integer
                          insurance_portion:
                            type: integer
                          patient_portion:
                            type: integer
                          non_insurance_cost:
                            type: integer
                          payable_amount:
                            type: integer
                          handmade_item:
                            type: integer
                            description: |
                              This field indicates the handmade drug item's id that is created with this item.

    TransferInvoicesResponse:
      description: a transfer invoice.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Invoice"
            type: object
            properties:
              second_party:
                writeOnly: true
              doctor:
                writeOnly: true
              storage:
                writeOnly: true
              source_storage:
                $ref: "#/components/schemas/Storage"
              dest_storage:
                $ref: "#/components/schemas/Storage"
              items:
                type: array
                items:
                  $ref: "#/components/schemas/InvoiceItem"
              insurance_plan:
                writeOnly: true

    ProductListResponse:
      description: get a list of product
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
              previous:
                type: string
              products:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Product"
                  type: object
                  properties:
                    attached_products:
                      type: array
                      items:
                        type: object
                        properties:
                          attached_product:
                            type: integer
                          count:
                            type: integer
                          has_attached_dispensing_fee:
                            type: boolean

    ProductCategoryListResponse:
      description: get a list of product_category
      content:
        application/json:
          schema:
            type: object
            properties:
              product_categories:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ProductSubCategory"
                    
                  type: object
               
                            
    ProductCategory:
      description: a Drug
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductCategory"

    CommitmentListRespnose:
      description: All insurance plan's commitments
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
              next:
                type: string
              previous:
                type: string
              commitments:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Commitment"
                  type: object
                  properties:
                    insurance_plan:
                      writeOnly: true

  parameters:
    RequiredNamespaceParam:
      name: namespace
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/Namespace/properties/id"

    FormSubjectKeyParam:
      name: subject_key
      in: query
      required: false
      schema:
        type: string

    FormRelatedClinicParam:
      name: related_clinic
      in: query
      required: false
      schema:
        type: string

    PaginationOffsetParam:
      name: offset
      in: query
      description: for pagination (0-based)
      required: true
      schema:
        type: integer

    PaginationLimitParam:
      name: limit
      in: query
      description: "for pagination (min: 10, max: 100)"
      required: true
      schema:
        type: integer
        minimum: 10
        maximum: 100

    NamespaceParam:
      name: namespace
      in: query
      description: identifier of the namespace
      required: true
      schema:
        type: string
        maxLength: 64

    TitleSearchParam:
      name: title
      in: query
      description: search by title like this parameter
      required: false
      schema:
        type: string

    IndexedFieldsFilterParam:
      name: filter_indexed_fields
      in: query
      description: |
        filters for indexed fields

        This must be exploded to `field=value` query parameter items (not the `filter_indexed_fields` name itself);
        click "Try it out" and "Execute" buttons on the endpoint to see the resulting `curl` command in action

        i.e. the example provided will be exploded to `subject_id=42&admission=127`

        Only indexed field of the form can be filtered here.

        Also, it is possible to range-filter indexed fields of suitable types (e.g. integer)
        by appending `.min` and `.max` to names of the indexed fields;
        e.g. `created.min=2020-12-1&created.max=2020-12-10`
      required: false
      style: form
      explode: true
      schema:
        type: object
        example: { "subject_id": 42, "admission": 127 }

    FormValidateParam:
      name: validate
      in: query
      required: false
      schema:
        type: boolean

    FormNameParam:
      name: form_name
      in: path
      required: true
      schema:
        type: string

    FormEntryIdParam:
      name: form_entry_id
      in: path
      required: true
      schema:
        type: integer

    PatientNameParam:
      name: patient_name
      in: query
      required: false
      schema:
        type: string

    CodeParam:
      name: code
      in: query
      required: false
      schema:
        type: string

    PlanParam:
      name: plan_id
      in: query
      required: true
      schema:
        type: integer

    PlanListParam:
      name: plan_id
      in: query
      required: false
      description: a list of insurances' id that they are joined by comma
      schema:
        type: string
        example: 1,2,3

    PriceMinParam:
      name: price_min
      in: query
      required: false
      schema:
        type: integer

    PriceMaxParam:
      name: price_max
      in: query
      required: false
      schema:
        type: integer

    CreatedToParam:
      name: created_to
      in: query
      required: false
      schema:
        type: string
        format: date

    CreatedFromParam:
      name: created_from
      in: query
      required: false
      schema:
        type: string
        format: date

    NameParam:
      name: name
      in: query
      required: false
      schema:
        type: string

    ProductCategoryParam:
      name: product_category
      in: query
      required: false
      schema:
        type: integer

    ProductTypeParam:
      name: product_type
      in: query
      required: false
      description: array of string that is seperated by `,`
      schema:
        type: string
        example: C,D

    ShortcutParam:
      name: shortcut
      in: query
      required: false
      schema:
        type: string

    DrugFormParam:
      name: form
      in: query
      required: false
      description: array of string that is seperated by `,`
      schema:
        type: string
        example: ampule,tablet,capsule

    DrugBrandParam:
      name: drug_brand
      in: query
      required: false
      schema:
        type: string

  securitySchemes:
    AccessJWT:
      description: |

        use `user/auth/token` with provided authorization code from Serebrum to obtain `access` and `refresh` token,
        or use `user/auth/login` with credentials to obtain `access` and `refresh` token

        use `/user/auth/refresh` to refresh `access` token

        include access token as bearer authoriztion header to authorize
        ```
        Authorization: Bearer <access>
        ```
      type: http
      scheme: bearer
      bearerFormat: JWT
