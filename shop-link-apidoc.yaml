openapi: 3.0.2
info:
  title: Shopeton Shop-link API Documentation
  description: |
    # Notes

    ## User
    our user have five important fields
    ### 1-username 
        username is set None by default we dont need it for authentication at all 
    #### 2-password
        password is seeting by a python secret password generator which have 10 char
    #### 3-mobile
        every user must have a unique mobile number
    #### 4-otp
        otp is a random number between 1000 to 9999 generated by python random function
    #### 5-otp-creation
        the time otp is created 
    

    ## JWT/Authentication
    ### fisrt-mobile-catch
    #### after requesting phone number a random number (otp) genrate and its value and time set to the user
    ### second-otp-catch
    #### after requesting otp we receive a response with two keys 'access' and 'refresh'
    
  version: "v1"

externalDocs:
  description: Find out more about Shopeton-project
  url: "https://www.notion.so/shopeton/"
  
servers:
  - url: "https://domain.com/api/v1"
  
tags:
  - name: user
  - name: shop

paths:

  "/user/register":
    post:
      tags:
        - user
      summary: create user and send otp
      parameters:
        - name: mobile
          required: True
          in: query
          schema:
            type: string

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"

  "/user/verify":
    post:
      tags:
        - user
      summary: create user and send otp
      parameters:
        - name: otp
          required: True
          in: query
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
                
  "/shop/create":
    post:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: otp
          required: True
          in: query
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
                
  "/shop/rud/{shop_id}":
    get:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: shop_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
    put:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: shop_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
    delete:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: shop_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
                
  "/shop/list":
    get:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: otp
          required: True
          in: query
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
                
  "/product/create":
    post:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: otp
          required: True
          in: query
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
  
  "/product/rud/{product_id}":
    get:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: product_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
    put:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: product_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
    delete:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: product_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
  
  "/product/list":
    get:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: otp
          required: True
          in: query
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
                
  "/category/create":
    post:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: otp
          required: True
          in: query
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
                
  "/category/rud/{category_id}":
    get:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: category_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
    put:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: category_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
    delete:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: category_id
          required: True
          in: path
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
  
  "/category/list":
    get:
      tags:
        - shop
      summary: create user and send otp
      parameters:
        - name: otp
          required: True
          in: query
          schema:
            type: integer

      responses:
        "201":
          $ref: "#/components/responses/UserWithPermissionsResponses"


        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_UNAUTHORIZED"

        "403":
          description: not allowed to perform this action
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_FORBIDDEN"
        "404":
          description: admission not found
          content:
            application/json:
              schema:
                $ref: "errors.yaml#/components/schemas/E_ADMISSION_NOT_FOUND"
  

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: |
            identifier of the user
            generated using snowflake algorithm
        username:
          description: user's mobile number
          type: string
          pattern: r"^989\d{9}$"
          example: "989111234567"

        first_name:
          type: string
          example: John

        last_name:
          type: string
          example: Doe

        dob:
          type: string
          format: YYYY-mm-dd
          example: "2019-03-17"

        national_id:
          type: string
          example: "2080387612"
          maxLength: 11
          minLength: 11

        profile_picture:
          description: profile image url
          type: string
          example: /media/1334212310.jpg
          nullable: true

        # domains:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/Hospital"

        namespaces:
          type: array
          items:
            $ref: "#/components/schemas/Namespace"

        assigned_namespaces:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/Namespace"

    UserSummary:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/User/properties/id"
        first_name:
          $ref: "#/components/schemas/User/properties/first_name"
        last_name:
          $ref: "#/components/schemas/User/properties/last_name"

    ReportImage:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          example: "/media/1334212131.jpg"

    ReportCore:
      type: object
      properties:
        content:
          type: string
          example: "blah blah blah"
        reported: # previously was date
          type: string
          format: "datetime|date"
          description: can be datetime or date
          example: "2019-03-17T03:30:00+0430"
        requester:
          type: string
          nullable: true
          example: "dr.who"
        provider:
          type: string
          nullable: true
          example: "sina hospital"

    ReportEdition:
      allOf:
        - type: object
          properties:
            report_type_id:
              $ref: "#/components/schemas/ReportType/properties/id"
            location_ids:
              type: array
              items:
                $ref: "#/components/schemas/ReportLocation/properties/id"
            admission_id:
              allOf:
                - $ref: "#/components/schemas/AdmissionCore/properties/id"
                - nullable: true
        - $ref: "#/components/schemas/ReportCore"

    ReportCreation:
      allOf:
        - type: object
          properties:
            patient_id:
              type: integer
        - $ref: "#/components/schemas/ReportEdition"

    Report:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              example: 1
              readOnly: true
            patient:
              $ref: "#/components/schemas/Patient"
            submitter:
              $ref: "#/components/schemas/UserSummary"
            report_type:
              $ref: "#/components/schemas/ReportType"
            locations:
              type: array
              items:
                $ref: "#/components/schemas/ReportLocation"
            admission: # TODO: AdmissionSummary (exclude patient and some other properties)
              allOf:
                - $ref: "#/components/schemas/Admission"
                - nullable: true
        - $ref: "#/components/schemas/ReportCore"
        - type: object
          properties:
            images:
              type: array
              items:
                $ref: "#/components/schemas/ReportImage"

    ReportLocation:
      type: object
      properties:
        id:
          type: string
          example: "L.LP213584-8.LP251119-6"
        name:
          type: string
          example: "chest"

    ReportType:
      type: object
      properties:
        id:
          type: string
          example: "L.LP208893-0.LP200070-3"
        name:
          type: string
          example: "radiology"


  # requestBodies:
  #   loginBody:
  #     required: true
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             username:
  #               type: string
  #               example: "user"
  #             password:
  #               type: string
  #               example: "password"
  #   createAdmissionBody:
  #     required: true
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - type: object
  #               properties:
  #                 admitted:
  #                   $ref: "#/components/schemas/AdmissionCore/properties/admitted"
  #                 type:
  #                   allOf:
  #                     - $ref: "#/components/schemas/AdmissionType/properties/id"
  #                     - nullable: true

  #                 insurance_type:
  #                   allOf:
  #                     - $ref: "#/components/schemas/InsuranceType/properties/id"
  #                     - nullable: true

  #                 insurance_number:
  #                   $ref: "#/components/schemas/AdmissionCore/properties/insurance_number"

  #                 companion_first_name:
  #                   $ref: "#/components/schemas/AdmissionCore/properties/companion_first_name"

  #                 companion_last_name:
  #                   $ref: "#/components/schemas/AdmissionCore/properties/companion_last_name"

  #                 companion_relation:
  #                   $ref: "#/components/schemas/AdmissionCore/properties/companion_relation"

  #                 dismissed:
  #                   $ref: "#/components/schemas/AdmissionCore/properties/dismissed"

  #                 is_dismissed:
  #                   $ref: "#/components/schemas/AdmissionCore/properties/is_dismissed"

  #                 arrival_mode:
  #                   $ref: "#/components/schemas/ArrivalMode/properties/id"

  #                 patient: # TODO: replace with patient_id
  #                   type: integer
  #                   description: patient ID
  #                   example: 6

  #             - $ref: "#/components/schemas/ResidencyModel"

  #   createPatientBody:
  #     required: true
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/PatientCreation"

  #   # TODO: summarize createAdmissionBody

  #   EditFormEntry:
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/FormEntryEdition"
  #   CreateForm:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - type: object
  #               properties:
  #                 namespace:
  #                   type: string
  #                   description: identifier of the namespace
  #             - $ref: "#/components/schemas/Form"

  #   SubmitFormEntry:
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/FormEntrySubmission"

  #   CreateInsurance:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Insurance"
  #           type: object
  #           properties:
  #             namespace:
  #               type: string
  #               readOnly: false
  #               description: identifier of the namespace

  #   CreateInsurancePlan:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/InsurancePlan"
  #           type: object
  #           properties:
  #             insurance:
  #               type: integer
  #               readOnly: false

  #   CreateCommitment:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Commitment"
  #           type: object
  #           properties:
  #             insurance_plan:
  #               type: integer
  #               readOnly: false
  #             product:
  #               type: integer
  #               readOnly: false
  #             speciality:
  #               type: array
  #               items:
  #                 type: integer

  #   CreateStorage:
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/Storage"

  #   CreateInvoice:
  #     description: |
  #       If an item has `ingredients`, it should have `product`.
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Invoice"
  #           type: object
  #           properties:
  #             second_party:
  #               type: integer
  #             doctor:
  #               type: integer
  #             insurance_plan:
  #               type: integer
  #             storage:
  #               type: integer
  #             related_invoice:
  #               readOnly: true
  #             items:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/CreationInvoiceItem"
  #                 type: object
  #                 properties:
  #                   product:
  #                     type: integer
  #                   attachments:
  #                     type: array
  #                     items:
  #                       allOf:
  #                         - $ref: "#/components/schemas/CreationInvoiceItem"
  #                       type: object
  #                       properties:
  #                         product:
  #                           type: integer
  #                   ingredients:
  #                     type: array
  #                     items:
  #                       allOf:
  #                         - $ref: "#/components/schemas/CreationInvoiceItem"
  #                       type: object
  #                       properties:
  #                         product:
  #                           type: integer

  #   CreateTransferInvoice:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Invoice"
  #           type: object
  #           properties:
  #             second_party:
  #               readOnly: true
  #             discount:
  #               readOnly: true
  #             insurance_plan:
  #               readOnly: true
  #             insurance_code:
  #               readOnly: true
  #             prescription_code:
  #               readOnly: true
  #             prescription_date:
  #               readOnly: true
  #             insurance_expiration:
  #               readOnly: true
  #             doctor:
  #               readOnly: true
  #             storage:
  #               readOnly: true
  #             source_storage:
  #               type: integer
  #             dest_storage:
  #               type: integer
  #             related_invoice:
  #               readOnly: True
  #             items:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/CreationInvoiceItem"

  #   ChangeInvoice:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Invoice"
  #           type: object
  #           properties:
  #             insurance_plan:
  #               type: integer
  #             items:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/CreationInvoiceItem"
  #                 type: object
  #                 properties:
  #                   handmade_item:
  #                     type: integer
  #                     nullable: true
  #             order:
  #               type: string
  #               readOnly: false

  #   CreateDoctor:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Doctor"
  #           type: object
  #           properties:
  #             speciality:
  #               description: a list of the speciality ids.
  #               type: array
  #               items:
  #                 type: integer

  #   UpdateDoctorRequest:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Doctor"
  #           type: object
  #           properties:
  #             speciality:
  #               description: a list of the speciality ids.
  #               type: array
  #               items:
  #                 type: integer
  #             namespace:
  #               readOnly: true

  #   CreateSecondParty:
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/SecondParty"

  #   UpdateSecondParty:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/SecondParty"
  #           type: object
  #           properties:
  #             namespace:
  #               readOnly: true

  #   CreateProduct:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Product"
  #           type: object
  #           properties:
  #             product_category:
  #               type: integer

  #   UpdateProduct:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Product"
  #           type: object
  #           properties:
  #             product_category:
  #               type: integer
  #             namespace:
  #               readOnly: true

  #   CreateAttachedProduct:
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             attached_products:
  #               type: array
  #               items:
  #                 type: object
  #                 properties:
  #                   product:
  #                     type: integer
  #                   attached_product:
  #                     type: integer
  #                   count:
  #                     type: integer
  #                   has_attached_dispensing_fee:
  #                     type: boolean

  #   CreateShortcut:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Shortcut"
  #           type: object
  #           properties:
  #             product:
  #               type: integer

  #   CreateProductCategory:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/ProductCategory"
  #           type: object
  #           properties:
  #             parent:
  #               type: integer

  #   UpdateProductCategory:
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/ProductCategory"
  #           type: object
  #           properties:
  #             parent:
  #               type: integer
  #             namespace:
  #               readOnly: true

  # responses:
  #   UserWithPermissionsResponses:
  #     description: a user with his permissions in specific namespace.
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/User"
  #           type: object
  #           properties:
  #             clinics:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Clinic"
  #             permissions:
  #               description: |
  #                 The keys in this object are permission name and the value is a boolean that is indicated the user has the permission in the namespace or not.
  #               type: object
  #               properties:
  #                 permission_name:
  #                   type: boolean

  #   FormEntriesResponse:
  #     description: filtered form entries
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             entries:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/FormEntry"

  #   SubmittedFormEntryResponse:
  #     description: submitted form entry
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/FormEntry"

  #   EditedFormEntryResponse:
  #     description: edited form entry
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/FormEntry"

  #   SubmittedSynFormFileEntryResponse:
  #     description: submitted form file entry
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/SynFormFileEntry"

  #   BadFormResponse:
  #     description: |
  #       bad form

  #       **NOTE:** see different variations at Schema
  #     content:
  #       application/json:
  #         schema:
  #           oneOf:
  #             - $ref: "errors.yaml#/components/schemas/E_FORM_SUGGESTED_HANDLE_TOO_LONG"
  #             - $ref: "errors.yaml#/components/schemas/E_BAD_FORM"
  #             - $ref: "errors.yaml#/components/schemas/E_BAD_FORM_FIELDS"

  #   BadFormEntryQueryResponse:
  #     description: "unknown indexed_field(s) or bad offset/limit"
  #     content:
  #       {
  #         application/json:
  #           {
  #             schema: { $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST" },
  #           },
  #       }

  #   BadFormEntryResponse:
  #     description: "bad submitted fields"
  #     content:
  #       {
  #         application/json:
  #           {
  #             schema: { $ref: "errors.yaml#/components/schemas/E_BAD_REQUEST" },
  #           },
  #       }

  #   FormNameNotFoundResponse:
  #     description: |
  #       form not found or not accessible

  #       **NOTE:** This error does not reveal whether the form name exists or not.
  #     content:
  #       {
  #         application/json:
  #           {
  #             schema:
  #               {
  #                 $ref: "errors.yaml#/components/schemas/E_FORM_NAME_NOT_FOUND",
  #               },
  #           },
  #       }

  #   FormEntryNotFoundResponse:
  #     description: |
  #       form entry or form not found

  #       **NOTE:** This error does not reveal whether the form name exists or not.
  #     content:
  #       {
  #         application/json:
  #           {
  #             schema:
  #               {
  #                 $ref: "errors.yaml#/components/schemas/E_FORM_ENTRY_NOT_FOUND",
  #               },
  #           },
  #       }

  #   SubmittedSynFormFileStageResponse:
  #     description: submitted form file structure
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/SynFormStageFile"

  #   SubmittedSynFormEntryFileStageResponse:
  #     description: submitted form file entry
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/SynFormEntryFileStage"

  #   StorageDailyStatsResponse:
  #     description: the newest storage's daily stats
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/DailyStats"

  #   InsuranceResponse:
  #     description: get an insurance org.
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/InsuranceResponseSchema"

  #   InsuranceListResponse:
  #     description: get all insurance org.
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             insurances:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/InsuranceResponseSchema"

  #   InvoicesListResponse:
  #     description: a page of all filtered invoices.
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             count:
  #               type: integer
  #             next:
  #               type: string
  #             previous:
  #               type: string
  #             invoices:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/SummaryInvoice"
  #                 type: object
  #                 properties:
  #                   insurance_plan:
  #                     $ref: "#/components/schemas/InsurancePlan"

  #   InvoiceCalculatorResponse:
  #     description: calculator
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             invoice_total_cost:
  #               type: integer
  #             insurance_total_cost:
  #               type: integer
  #             insurance_portion:
  #               type: integer
  #             patient_portion:
  #               type: integer
  #             non_insurance_cost:
  #               type: integer
  #             payable_amount:
  #               type: integer
  #             items:
  #               type: array
  #               items:
  #                 type: object
  #                 properties:
  #                   product:
  #                     type: integer
  #                   max_qty:
  #                     type: integer
  #                   sell_amount:
  #                     type: integer
  #                   insurance_total_cost:
  #                     type: integer
  #                   insurance_portion:
  #                     type: integer
  #                   patient_portion:
  #                     type: integer
  #                   non_insurance_cost:
  #                     type: integer

  #   DoctorResponse:
  #     description: a doctor.
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Doctor"
  #           type: object
  #           properties:
  #             speciality:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Speciality"

  #   SpecialityListResponse:
  #     description: a list of the specialities.
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             specialities:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Speciality"

  #   DoctorListResponse:
  #     description: a list of the doctors.
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             doctors:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/Doctor"
  #                 type: object
  #                 properties:
  #                   speciality:
  #                     type: array
  #                     items:
  #                       $ref: "#/components/schemas/Doctor"

  #   SecondPartyResponse:
  #     description: a second party.
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/SecondParty"

  #   InvoicesResponse:
  #     description: an invoice. `Note` **attachments** and **ingredients** don't come together in one response.
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Invoice"
  #           type: object
  #           properties:
  #             product:
  #               writeOnly: false
  #               allOf:
  #                 - $ref: "#/components/schemas/Product"
  #             insurance_plan:
  #               $ref: "#/components/schemas/InsurancePlan"
  #             insurance_total_cost:
  #               type: integer
  #             insurance_portion:
  #               type: integer
  #             patient_portion:
  #               type: integer
  #             non_insurance_cost:
  #               type: integer
  #             payable_amount:
  #               type: integer
  #             items:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/InvoiceItem"
  #                 type: object
  #                 properties:
  #                   product:
  #                     writeOnly: false
  #                     allOf:
  #                       - $ref: "#/components/schemas/Product"
  #                   insurance_total_cost:
  #                     type: integer
  #                   insurance_portion:
  #                     type: integer
  #                   patient_portion:
  #                     type: integer
  #                   non_insurance_cost:
  #                     type: integer
  #                   payable_amount:
  #                     type: integer
  #                   attachments:
  #                     # readOnly: true
  #                     description: |
  #                       This field represent the all products were used in this handmade drug creation.
  #                       This field is not a column in the database and it is other side of the `handmade_drug` relation.
  #                       It isn't an empty list only if we want to model a handmade drug.
  #                     type: array
  #                     items:
  #                       allOf:
  #                         - $ref: "#/components/schemas/CreationInvoiceItem"
  #                       type: object
  #                       properties:
  #                         product:
  #                           writeOnly: false
  #                           allOf:
  #                             - $ref: "#/components/schemas/Product"
  #                         insurance_total_cost:
  #                           type: integer
  #                         insurance_portion:
  #                           type: integer
  #                         patient_portion:
  #                           type: integer
  #                         non_insurance_cost:
  #                           type: integer
  #                         payable_amount:
  #                           type: integer

  #                   ingredients:
  #                     # readOnly: true
  #                     description: |
  #                       This field represent the all products were used in this handmade drug creation.
  #                       This field is not a column in the database and it is other side of the `handmade_drug` relation.
  #                       It isn't an empty list only if we want to model a handmade drug.
  #                     type: array
  #                     items:
  #                       allOf:
  #                         - $ref: "#/components/schemas/CreationInvoiceItem"
  #                       type: object
  #                       properties:
  #                         product:
  #                           writeOnly: false
  #                           allOf:
  #                             - $ref: "#/components/schemas/Product"
  #                         insurance_total_cost:
  #                           type: integer
  #                         insurance_portion:
  #                           type: integer
  #                         patient_portion:
  #                           type: integer
  #                         non_insurance_cost:
  #                           type: integer
  #                         payable_amount:
  #                           type: integer
  #                         handmade_item:
  #                           type: integer
  #                           description: |
  #                             This field indicates the handmade drug item's id that is created with this item.

  #   TransferInvoicesResponse:
  #     description: a transfer invoice.
  #     content:
  #       application/json:
  #         schema:
  #           allOf:
  #             - $ref: "#/components/schemas/Invoice"
  #           type: object
  #           properties:
  #             second_party:
  #               writeOnly: true
  #             doctor:
  #               writeOnly: true
  #             storage:
  #               writeOnly: true
  #             source_storage:
  #               $ref: "#/components/schemas/Storage"
  #             dest_storage:
  #               $ref: "#/components/schemas/Storage"
  #             items:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/InvoiceItem"
  #             insurance_plan:
  #               writeOnly: true

  #   ProductListResponse:
  #     description: get a list of product
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             count:
  #               type: integer
  #             next:
  #               type: string
  #             previous:
  #               type: string
  #             products:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/Product"
  #                 type: object
  #                 properties:
  #                   attached_products:
  #                     type: array
  #                     items:
  #                       type: object
  #                       properties:
  #                         attached_product:
  #                           type: integer
  #                         count:
  #                           type: integer
  #                         has_attached_dispensing_fee:
  #                           type: boolean

  #   ProductCategoryListResponse:
  #     description: get a list of product_category
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             product_categories:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/ProductSubCategory"
                    
  #                 type: object
               
                            
  #   ProductCategory:
  #     description: a Drug
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/ProductCategory"

  #   CommitmentListRespnose:
  #     description: All insurance plan's commitments
  #     content:
  #       application/json:
  #         schema:
  #           type: object
  #           properties:
  #             count:
  #               type: integer
  #             next:
  #               type: string
  #             previous:
  #               type: string
  #             commitments:
  #               type: array
  #               items:
  #                 allOf:
  #                   - $ref: "#/components/schemas/Commitment"
  #                 type: object
  #                 properties:
  #                   insurance_plan:
  #                     writeOnly: true

  # parameters:
  #   RequiredNamespaceParam:
  #     name: namespace
  #     in: query
  #     required: true
  #     schema:
  #       $ref: "#/components/schemas/Namespace/properties/id"

  #   FormSubjectKeyParam:
  #     name: subject_key
  #     in: query
  #     required: false
  #     schema:
  #       type: string

  #   FormRelatedClinicParam:
  #     name: related_clinic
  #     in: query
  #     required: false
  #     schema:
  #       type: string

  #   PaginationOffsetParam:
  #     name: offset
  #     in: query
  #     description: for pagination (0-based)
  #     required: true
  #     schema:
  #       type: integer

  #   PaginationLimitParam:
  #     name: limit
  #     in: query
  #     description: "for pagination (min: 10, max: 100)"
  #     required: true
  #     schema:
  #       type: integer
  #       minimum: 10
  #       maximum: 100

  #   NamespaceParam:
  #     name: namespace
  #     in: query
  #     description: identifier of the namespace
  #     required: true
  #     schema:
  #       type: string
  #       maxLength: 64

  #   TitleSearchParam:
  #     name: title
  #     in: query
  #     description: search by title like this parameter
  #     required: false
  #     schema:
  #       type: string

  #   IndexedFieldsFilterParam:
  #     name: filter_indexed_fields
  #     in: query
  #     description: |
  #       filters for indexed fields

  #       This must be exploded to `field=value` query parameter items (not the `filter_indexed_fields` name itself);
  #       click "Try it out" and "Execute" buttons on the endpoint to see the resulting `curl` command in action

  #       i.e. the example provided will be exploded to `subject_id=42&admission=127`

  #       Only indexed field of the form can be filtered here.

  #       Also, it is possible to range-filter indexed fields of suitable types (e.g. integer)
  #       by appending `.min` and `.max` to names of the indexed fields;
  #       e.g. `created.min=2020-12-1&created.max=2020-12-10`
  #     required: false
  #     style: form
  #     explode: true
  #     schema:
  #       type: object
  #       example: { "subject_id": 42, "admission": 127 }

  #   FormValidateParam:
  #     name: validate
  #     in: query
  #     required: false
  #     schema:
  #       type: boolean

  #   FormNameParam:
  #     name: form_name
  #     in: path
  #     required: true
  #     schema:
  #       type: string

  #   FormEntryIdParam:
  #     name: form_entry_id
  #     in: path
  #     required: true
  #     schema:
  #       type: integer

  #   PatientNameParam:
  #     name: patient_name
  #     in: query
  #     required: false
  #     schema:
  #       type: string

  #   CodeParam:
  #     name: code
  #     in: query
  #     required: false
  #     schema:
  #       type: string

  #   PlanParam:
  #     name: plan_id
  #     in: query
  #     required: true
  #     schema:
  #       type: integer

  #   PlanListParam:
  #     name: plan_id
  #     in: query
  #     required: false
  #     description: a list of insurances' id that they are joined by comma
  #     schema:
  #       type: string
  #       example: 1,2,3

  #   PriceMinParam:
  #     name: price_min
  #     in: query
  #     required: false
  #     schema:
  #       type: integer

  #   PriceMaxParam:
  #     name: price_max
  #     in: query
  #     required: false
  #     schema:
  #       type: integer

  #   CreatedToParam:
  #     name: created_to
  #     in: query
  #     required: false
  #     schema:
  #       type: string
  #       format: date

  #   CreatedFromParam:
  #     name: created_from
  #     in: query
  #     required: false
  #     schema:
  #       type: string
  #       format: date

  #   NameParam:
  #     name: name
  #     in: query
  #     required: false
  #     schema:
  #       type: string

  #   ProductCategoryParam:
  #     name: product_category
  #     in: query
  #     required: false
  #     schema:
  #       type: integer

  #   ProductTypeParam:
  #     name: product_type
  #     in: query
  #     required: false
  #     description: array of string that is seperated by `,`
  #     schema:
  #       type: string
  #       example: C,D

  #   ShortcutParam:
  #     name: shortcut
  #     in: query
  #     required: false
  #     schema:
  #       type: string

  #   DrugFormParam:
  #     name: form
  #     in: query
  #     required: false
  #     description: array of string that is seperated by `,`
  #     schema:
  #       type: string
  #       example: ampule,tablet,capsule

  #   DrugBrandParam:
  #     name: drug_brand
  #     in: query
  #     required: false
  #     schema:
  #       type: string

  securitySchemes:
    AccessJWT:
      description: |

        use `user/auth/token` with provided authorization code from Serebrum to obtain `access` and `refresh` token,
        or use `user/auth/login` with credentials to obtain `access` and `refresh` token

        use `/user/auth/refresh` to refresh `access` token

        include access token as bearer authoriztion header to authorize
        ```
        Authorization: Bearer <access>
        ```
      type: http
      scheme: bearer
      bearerFormat: JWT
